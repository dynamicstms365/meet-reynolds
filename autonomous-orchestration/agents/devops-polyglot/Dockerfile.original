# Multi-stage build for DevOps Polyglot Specialist Agent
FROM node:18-alpine AS base

# Install base system dependencies
RUN apk add --no-cache \
    curl \
    git \
    bash \
    jq \
    wget \
    unzip \
    tar \
    gzip \
    ca-certificates \
    openssl \
    python3 \
    py3-pip \
    python3-dev \
    build-base \
    musl-dev \
    linux-headers

# Install Docker CLI
RUN apk add --no-cache docker-cli

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl \
    && rm kubectl

# Install Azure CLI
RUN pip3 install --break-system-packages azure-cli

# Install GitHub CLI
RUN wget https://github.com/cli/cli/releases/latest/download/gh_$(wget -q -O- https://api.github.com/repos/cli/cli/releases/latest | jq -r .tag_name | cut -c2-)_linux_amd64.tar.gz \
    && tar -xzf gh_*_linux_amd64.tar.gz \
    && mv gh_*_linux_amd64/bin/gh /usr/local/bin/ \
    && rm -rf gh_*

# Install Terraform
RUN wget https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip \
    && unzip terraform_1.6.6_linux_amd64.zip \
    && mv terraform /usr/local/bin/ \
    && rm terraform_1.6.6_linux_amd64.zip

# Install Helm
RUN wget https://get.helm.sh/helm-v3.13.3-linux-amd64.tar.gz \
    && tar -zxvf helm-v3.13.3-linux-amd64.tar.gz \
    && mv linux-amd64/helm /usr/local/bin/helm \
    && rm -rf helm-v3.13.3-linux-amd64.tar.gz linux-amd64

# Install Jenkins CLI (optional)
RUN wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war \
    && mkdir -p /opt/jenkins \
    && mv jenkins.war /opt/jenkins/ \
    && echo '#!/bin/bash\njava -jar /opt/jenkins/jenkins.war "$@"' > /usr/local/bin/jenkins \
    && chmod +x /usr/local/bin/jenkins

# Create non-root user for security
RUN addgroup -g 1001 devops && \
    adduser -D -u 1001 -G devops devops

# Set working directory
WORKDIR /app

# Copy package files first for better Docker layer caching
COPY package*.json ./

# Install Node.js dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy application code
COPY . .

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/knowledge \
    /app/context \
    /app/memory \
    /app/workspace \
    /app/cache \
    /app/tools \
    /app/secrets \
    && chown -R devops:devops /app

# Set proper ownership
RUN chown -R devops:devops /app

# Switch to non-root user
USER devops

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose agent port
EXPOSE 8080

# Set environment variables
ENV NODE_ENV=production
ENV AGENT_TYPE=devops-polyglot
ENV LOG_LEVEL=info
ENV PORT=8080

# Volume mounts for persistence and context
VOLUME ["/app/workspace", "/app/context", "/app/memory", "/app/secrets"]

# Labels for container identification
LABEL maintainer="Reynolds Orchestration Team" \
      agent.type="devops-polyglot" \
      agent.philosophy="I know GitHub like a developer, but think like DevOps" \
      agent.version="1.0.0" \
      agent.capabilities="github,ci-cd,kubernetes,docker,terraform,helm,azure-devops,jenkins"

# Start the DevOps agent
CMD ["node", "DevOpsAgent.js"]