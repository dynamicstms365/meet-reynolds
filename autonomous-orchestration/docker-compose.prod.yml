# Reynolds Orchestration System - Production Configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
version: '3.8'

services:
  # Reynolds Orchestrator - Production Configuration
  reynolds:
    environment:
      - ORCHESTRATOR_MODE=production
      - LOG_LEVEL=info
      - HOT_RELOAD=false
      - DEBUG_ENABLED=false
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # DevOps Agent - Production Configuration
  devops-agent:
    environment:
      - LOG_LEVEL=info
      - HOT_RELOAD=false
      - PRODUCTION_MODE=true
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Platform Agent - Production Configuration
  platform-agent:
    environment:
      - LOG_LEVEL=info
      - HOT_RELOAD=false
      - PRODUCTION_MODE=true
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Code Intelligence Agent - Production Configuration
  code-agent:
    environment:
      - LOG_LEVEL=info
      - HOT_RELOAD=false
      - PRODUCTION_MODE=true
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis - Production Configuration
  redis:
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 800mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL - Production Configuration
  postgres:
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    environment:
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_LOG_STATEMENT=ddl
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus - Production Configuration
  prometheus:
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Grafana - Production Configuration
  grafana:
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.2'
    environment:
      - GF_LOG_LEVEL=info
      - GF_EXPLORE_ENABLED=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ENABLED=false
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Load Balancer for Reynolds (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - agent-network
    depends_on:
      - reynolds
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

# Production volumes with optimized settings
volumes:
  reynolds-memory:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/reynolds-memory

  devops-memory:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/agent-memory/devops

  platform-memory:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/agent-memory/platform

  code-memory:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/agent-memory/code

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/redis-data

  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/postgres-data

  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/monitoring/prometheus

  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/data/monitoring/grafana

  nginx-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/reynolds/logs/nginx

# Production network with custom driver options
networks:
  agent-network:
    driver: overlay
    driver_opts:
      encrypted: "true"
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.reynolds.network=agent-coordination"
      - "com.reynolds.environment=production"