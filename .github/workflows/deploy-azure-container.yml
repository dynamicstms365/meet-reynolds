name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'github-copilot-bot'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_url: ${{ steps.build_push.outputs.image_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test
        run: |
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish          

      - name: Build and Push to GitHub Container Registry
        id: build_push
        env:
          REGISTRY: ghcr.io
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: copilot-powerplatform
          IMAGE_NAME: copilot-agent
        run: |
          # Debug: Print environment variables and repository info
          echo "DEBUG: REGISTRY=$REGISTRY"
          echo "DEBUG: REPO_OWNER=$REPO_OWNER"
          echo "DEBUG: REPO_NAME=$REPO_NAME"
          echo "DEBUG: IMAGE_NAME=$IMAGE_NAME"
          echo "DEBUG: github.repository=${{ github.repository }}"
          echo "DEBUG: github.repository_owner=${{ github.repository_owner }}"
          echo "DEBUG: github.actor=${{ github.actor }}"
          echo "DEBUG: github.sha=${{ github.sha }}"
          
          # Construct the full image name using individual components and convert to lowercase
          FULL_IMAGE_NAME=$(echo "$REPO_OWNER/$REPO_NAME/$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "DEBUG: FULL_IMAGE_NAME=$FULL_IMAGE_NAME"
          
          # Validate that the components are not empty and image name is well-formed
          if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$IMAGE_NAME" ]]; then
            echo "ERROR: One or more image name components are empty"
            echo "REPO_OWNER='$REPO_OWNER', REPO_NAME='$REPO_NAME', IMAGE_NAME='$IMAGE_NAME'"
            exit 1
          fi
          
          if [[ ! "$FULL_IMAGE_NAME" =~ ^[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+$ ]]; then
            echo "ERROR: FULL_IMAGE_NAME appears to be invalid: $FULL_IMAGE_NAME"
            echo "Expected format: owner/repository/image-name (lowercase)"
            exit 1
          fi
          # Build the Docker image using pre-built output and permanent Dockerfile
          docker build -t $REGISTRY/$FULL_IMAGE_NAME:latest .
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:${{ github.sha }}
          
          # Login to GitHub Container Registry using GitHub token
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push to GitHub Container Registry
          docker push $REGISTRY/$FULL_IMAGE_NAME:latest
          docker push $REGISTRY/$FULL_IMAGE_NAME:${{ github.sha }}
          
          # Construct and validate the final image URL
          FINAL_IMAGE_URL="$REGISTRY/$FULL_IMAGE_NAME:latest"
          echo "DEBUG: Final image URL: $FINAL_IMAGE_URL"
          
          # Validate the image URL format
          if [[ ! "$FINAL_IMAGE_URL" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:(latest|[a-z0-9._-]+)$ ]]; then
            echo "ERROR: Generated image URL is invalid: $FINAL_IMAGE_URL"
            echo "Expected format: ghcr.io/owner/repository/image-name:tag (lowercase)"
            exit 1
          fi
          
          echo "image_url=$FINAL_IMAGE_URL" >> $GITHUB_OUTPUT
          echo "SUCCESS: Image URL validated and set: $FINAL_IMAGE_URL"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Deploy to Azure Container Apps
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build.outputs.image_url }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENV }}
          location: ${{ env.AZURE_LOCATION }}
          targetPort: 8080
          ingress: external
          environmentVariables: |
            NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:8080

      - name: Configure Container App Resources and Secrets
        run: |
          echo "🔧 Configuring container app resources and secrets..."
          
          # Set secrets
          az containerapp secret set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --secrets "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}"
          
          # Update container app with resource constraints and secret reference
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set-env-vars "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
            --cpu 1.0 \
            --memory 2.0Gi \
            --min-replicas 1 \
            --max-replicas 3
          
          echo "✅ Container app configuration completed"

      - name: Validate Image URL and Get FQDN
        id: validate_deploy
        run: |
          # Validate the image URL from build output
          IMAGE_URL="${{ needs.build.outputs.image_url }}"
          echo "DEBUG: Received image URL: $IMAGE_URL"
          
          # Validate image URL format
          if [[ -z "$IMAGE_URL" ]]; then
            echo "ERROR: No image URL received from build job"
            exit 1
          fi
          
          if [[ ! "$IMAGE_URL" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:(latest|[a-z0-9._-]+)$ ]]; then
            echo "ERROR: Invalid image URL format received: $IMAGE_URL"
            echo "Expected format: ghcr.io/owner/repository/image-name:tag (lowercase)"
            exit 1
          fi
          
          echo "SUCCESS: Image URL validation passed: $IMAGE_URL"
          
          # Get container app FQDN
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Validate Deployment
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Container App FQDN: ${{ steps.validate_deploy.outputs.fqdn }}"
          echo "🔗 Webhook URL: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "🔗 Health Check: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "🔗 Test Endpoint: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/test"
          echo "🔗 MCP Capabilities: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "🔗 MCP SSE: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          
          # Wait for container to be ready and test health endpoint
          echo "⏳ Waiting for container app to be ready..."
          sleep 60
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "🧪 Testing MCP capabilities endpoint..."
          curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities" || echo "⚠️ MCP capabilities endpoint not responding"

      - name: Generate GitHub App JWT Token
        id: generate_jwt
        run: |
          # Install jsonwebtoken package for JWT generation
          npm install jsonwebtoken
          
          # Create JWT generation script
          cat > generate_jwt.js << 'EOF'
          const jwt = require('jsonwebtoken');
          const fs = require('fs');
          
          // Read environment variables
          const appId = process.env.APP_ID;
          let privateKey = process.env.PRIVATE_KEY;
          
          if (!appId || !privateKey) {
            console.error('Missing APP_ID or PRIVATE_KEY environment variables');
            process.exit(1);
          }
          
          // Comprehensive private key formatting
          // 1. Replace literal \n with actual newlines
          privateKey = privateKey.replace(/\\n/g, '\n');
          
          // 2. Remove any extra whitespace and normalize
          privateKey = privateKey.trim();
          
          // 3. Ensure proper PEM headers/footers if missing
          if (!privateKey.startsWith('-----BEGIN')) {
            console.error('Private key missing PEM header');
            process.exit(1);
          }
          
          // 4. Handle potential base64 encoding issues
          if (!privateKey.includes('\n') && privateKey.length > 100) {
            // Key might be base64 encoded without newlines, try to format it
            const lines = privateKey.match(/.{1,64}/g);
            if (lines) {
              privateKey = lines.join('\n');
            }
          }
          
          // 5. Final validation
          if (!privateKey.includes('-----BEGIN RSA PRIVATE KEY-----') &&
              !privateKey.includes('-----BEGIN PRIVATE KEY-----')) {
            console.error('Private key does not appear to be in valid PEM format');
            console.error('Key preview:', privateKey.substring(0, 50) + '...');
            process.exit(1);
          }
          
          console.log('Private key format validation passed');
          console.log('Key starts with:', privateKey.substring(0, 30) + '...');
          
          // JWT payload for GitHub App
          const now = Math.floor(Date.now() / 1000);
          const payload = {
            iss: parseInt(appId),
            iat: now - 60,  // Issued 60 seconds ago to account for clock skew
            exp: now + (10 * 60)  // Expires in 10 minutes
          };
          
          try {
            // Generate JWT token
            const token = jwt.sign(payload, privateKey, { algorithm: 'RS256' });
            console.log('jwt_token=' + token);
          } catch (error) {
            console.error('Error generating JWT:', error.message);
            process.exit(1);
          }
          EOF
          
          # Generate JWT and capture output
          JWT_OUTPUT=$(node generate_jwt.js)
          
          # Extract token from output
          JWT_TOKEN=$(echo "$JWT_OUTPUT" | grep "jwt_token=" | cut -d'=' -f2)
          
          if [[ -z "$JWT_TOKEN" ]]; then
            echo "❌ Failed to generate JWT token"
            echo "Output: $JWT_OUTPUT"
            exit 1
          fi
          
          # Validate JWT format
          if [[ ! "$JWT_TOKEN" =~ ^eyJ[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
            echo "❌ Generated token doesn't match JWT format"
            echo "Token: $JWT_TOKEN"
            exit 1
          fi
          
          echo "✅ JWT token generated successfully"
          echo "🔍 Token prefix: ${JWT_TOKEN:0:50}..."
          echo "token=$JWT_TOKEN" >> $GITHUB_OUTPUT
        env:
          APP_ID: ${{ vars.NGL_DEVOPS_APP_ID }}
          PRIVATE_KEY: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Generate GitHub App Installation Token
        id: generate_installation_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ vars.NGL_DEVOPS_APP_ID }}
          private_key: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Token Validation and Diagnostics
        run: |
          echo "🔍 GitHub App Token Validation"
          echo "=============================="
          
          # App ID validation
          echo "📋 App ID: ${{ vars.NGL_DEVOPS_APP_ID }}"
          
          # JWT Token validation
          JWT_TOKEN="${{ steps.generate_jwt.outputs.token }}"
          echo ""
          echo "🎫 JWT Token (for app-level operations):"
          echo "  Generated: $([[ -n "$JWT_TOKEN" ]] && echo 'YES' || echo 'NO')"
          echo "  Length: ${#JWT_TOKEN}"
          if [[ -n "$JWT_TOKEN" ]]; then
            echo "  Format: $([[ "$JWT_TOKEN" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]] && echo 'JWT ✅' || echo 'Other ❌')"
            echo "  Prefix: ${JWT_TOKEN:0:20}..."
          fi
          
          # Installation Token validation
          INSTALL_TOKEN="${{ steps.generate_installation_token.outputs.token }}"
          echo ""
          echo "🔐 Installation Token (for repository operations):"
          echo "  Generated: $([[ -n "$INSTALL_TOKEN" ]] && echo 'YES' || echo 'NO')"
          echo "  Length: ${#INSTALL_TOKEN}"
          if [[ -n "$INSTALL_TOKEN" ]]; then
            echo "  Format: $([[ "$INSTALL_TOKEN" =~ ^ghs_ ]] && echo 'GitHub App Installation ✅' || echo 'Other ❌')"
            echo "  Prefix: ${INSTALL_TOKEN:0:20}..."
          fi
          
          # Test JWT token with app endpoint
          echo ""
          echo "🧪 JWT Token API Test:"
          if [[ -n "$JWT_TOKEN" ]]; then
            export GITHUB_TOKEN="$JWT_TOKEN"
            if APP_INFO=$(gh api /app 2>&1); then
              echo "  ✅ JWT token works for app-level operations"
              echo "  App name: $(echo "$APP_INFO" | jq -r '.name // "N/A"')"
            else
              echo "  ❌ JWT token failed for app-level operations"
              echo "  Error: $APP_INFO"
            fi
          else
            echo "  ⏭️  No JWT token to test"
          fi


      - name: Update GitHub App Webhook URL
        env:
          GITHUB_TOKEN: ${{ steps.generate_jwt.outputs.token }}
        run: |
          WEBHOOK_URL="https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "📝 Updating GitHub App webhook URL to: $WEBHOOK_URL"
          
          # Validate JWT token is available
          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "❌ ERROR: No JWT token available"
            echo "Cannot update webhook without app-level JWT token"
            exit 1
          fi
          
          echo "🎫 Using JWT token for app-level webhook operations"
          echo "🔍 Token validation:"
          echo "  Length: ${#GITHUB_TOKEN}"
          echo "  Format: $([[ "$GITHUB_TOKEN" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]] && echo 'JWT ✅' || echo 'Other ❌')"
          echo "  Prefix: ${GITHUB_TOKEN:0:20}..."
          
          # Test token validity with app endpoint
          echo ""
          echo "🧪 Testing JWT token with /app endpoint..."
          if APP_RESPONSE=$(gh api /app 2>&1); then
            echo "✅ JWT token validation passed"
            echo "App name: $(echo "$APP_RESPONSE" | jq -r '.name // "N/A"')"
          else
            echo "❌ ERROR: JWT token validation failed"
            echo "API Response: $APP_RESPONSE"
            echo ""
            echo "🚨 This suggests:"
            echo "  - JWT token is malformed or expired"
            echo "  - App ID (${{ vars.NGL_DEVOPS_APP_ID }}) doesn't match the private key"
            echo "  - GitHub App doesn't exist or is misconfigured"
            exit 1
          fi
          
          # Get current webhook configuration
          echo ""
          echo "📋 Getting current webhook configuration..."
          if CURRENT_CONFIG=$(gh api /app/hook/config 2>&1); then
            echo "Current webhook config: $CURRENT_CONFIG"
          else
            echo "⚠️  Warning: Failed to get current webhook config"
            echo "Response: $CURRENT_CONFIG"
            echo "Proceeding with webhook update anyway..."
          fi
          
          # Update the webhook URL using GitHub CLI with JWT token
          echo ""
          echo "🔄 Updating webhook URL..."
          if UPDATE_RESPONSE=$(gh api \
            --method PATCH \
            /app/hook/config \
            -f url="$WEBHOOK_URL" \
            -f content_type="json" \
            -f insecure_ssl="0" 2>&1); then
            echo "✅ Successfully updated GitHub App webhook URL"
            echo "New webhook config: $UPDATE_RESPONSE"
          else
            echo "❌ Failed to update GitHub App webhook URL"
            echo "Error response: $UPDATE_RESPONSE"
            
            # Provide detailed troubleshooting information
            echo ""
            echo "🔧 Troubleshooting Information:"
            echo "  - Webhook URL: $WEBHOOK_URL"
            echo "  - Token type: JWT (app-level)"
            echo "  - App ID: ${{ vars.NGL_DEVOPS_APP_ID }}"
            echo ""
            echo "🚨 Possible Issues:"
            echo "  1. GitHub App webhook configuration permissions missing"
            echo "  2. Webhook URL format invalid"
            echo "  3. GitHub App settings misconfigured"
            
            exit 1
          fi

      - name: Summary
        run: |
          echo "🚀 **Deployment Complete!**"
          echo ""
          echo "### 📍 Endpoints"
          echo "- **App URL**: https://${{ steps.validate_deploy.outputs.fqdn }}"
          echo "- **Health Check**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "- **Webhook**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "- **MCP Capabilities**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "- **MCP SSE**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          echo ""
          echo "### 🔧 Next Steps"
          echo "1. Test the health endpoint"
          echo "2. Generate API keys using the workflow"
          echo "3. Test MCP tools integration"