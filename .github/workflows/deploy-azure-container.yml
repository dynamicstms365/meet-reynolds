name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-rg'
  CONTAINER_NAME: 'github-app-service'
  AZURE_LOCATION: 'eastus'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.NGL_DEVOPS_APP_ID }}
          private-key: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test
        run: |
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Build and Push to GitHub Container Registry
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}/copilot-agent
        run: |
          # Create a simple Dockerfile that uses pre-built output
          cat > Dockerfile.prebuilt << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443

          # Create non-root user for security
          RUN groupadd -r copilot && useradd --no-log-init -r -g copilot copilot

          # Copy published application
          COPY ./publish .

          # Set ownership and permissions
          RUN chown -R copilot:copilot /app
          USER copilot

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
              CMD curl -f http://localhost/api/github/health || exit 1

          # Set environment variables
          ENV ASPNETCORE_URLS=http://+:80
          ENV ASPNETCORE_ENVIRONMENT=Production

          ENTRYPOINT ["dotnet", "CopilotAgent.dll"]
          EOF
          
          # Build the Docker image using pre-built output
          docker build -f Dockerfile.prebuilt -t $REGISTRY/$IMAGE_NAME:latest .
          docker tag $REGISTRY/$IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          
          # Login to GitHub Container Registry
          echo ${{ github.token }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push to GitHub Container Registry
          docker push $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          
          echo "image_url=$REGISTRY/$IMAGE_NAME:latest" >> $GITHUB_OUTPUT
        id: build_push

      - name: Deploy Container Instance
        id: deploy
        run: |
          # Remove existing container if it exists
          az container delete \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --yes || echo "Container did not exist"
          
          # Deploy new container instance using GitHub Container Registry
          az container create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --image ${{ steps.build_push.outputs.image_url }} \
            --registry-login-server ghcr.io \
            --registry-username ${{ github.actor }} \
            --registry-password ${{ github.token }} \
            --dns-name-label copilot-github-app-$(date +%s | tail -c 6) \
            --ports 80 443 \
            --os-type Linux \
            --environment-variables \
              "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" \
              "ASPNETCORE_ENVIRONMENT=Production" \
              "ASPNETCORE_URLS=http://+:80" \
            --secure-environment-variables \
              "NGL_DEVOPS_BOT_PEM=${{ secrets.NGL_DEVOPS_BOT_PEM }}" \
            --cpu 1 \
            --memory 1.5 \
            --restart-policy Always
          
          # Get container information
          FQDN=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "ipAddress.fqdn" -o tsv)
          IP=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} --query "ipAddress.ip" -o tsv)
          
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "ip=$IP" >> $GITHUB_OUTPUT

      - name: Validate Deployment
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Container FQDN: ${{ steps.deploy.outputs.fqdn }}"
          echo "📍 Container IP: ${{ steps.deploy.outputs.ip }}"
          echo "🔗 Webhook URL: https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "🔗 Health Check: https://${{ steps.deploy.outputs.fqdn }}/api/github/health"
          echo "🔗 Test Endpoint: https://${{ steps.deploy.outputs.fqdn }}/api/github/test"
          
          # Wait for container to be ready and test health endpoint
          echo "⏳ Waiting for container to be ready..."
          sleep 30
          
          # Test health endpoint
          for i in {1..5}; do
            if curl -f "https://${{ steps.deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Update GitHub App Webhook URL
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "📝 GitHub App webhook should be updated to: https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "💡 This step would typically update the GitHub App configuration, but requires app-level permissions"
          
      - name: Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 GitHub App Service Deployment Summary
          
          ### ✅ Deployment Status: SUCCESS
          
          | Property | Value |
          |----------|-------|
          | **Container FQDN** | \`${{ steps.deploy.outputs.fqdn }}\` |
          | **Container IP** | \`${{ steps.deploy.outputs.ip }}\` |
          | **Webhook URL** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook\` |
          | **Health Check** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/health\` |
          | **Test Endpoint** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/test\` |
          
          ### 📋 Next Steps:
          1. Update GitHub App webhook URL in organization settings
          2. Test webhook delivery from GitHub
          3. Monitor container logs: \`az container logs --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}\`
          
          ### 🔧 Management Commands:
          \`\`\`bash
          # View container logs
          az container logs --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}
          
          # Restart container
          az container restart --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}
          
          # Delete container
          az container delete --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}
          \`\`\`
          EOF