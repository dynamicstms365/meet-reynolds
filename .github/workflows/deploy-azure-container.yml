name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'github-copilot-bot'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_url: ${{ steps.build_push.outputs.image_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test
        run: |
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish          

      - name: Build and Push to Azure Container Registry
        id: build_push
        env:
          ACR_NAME: copilotpowerplatformacr
          IMAGE_NAME: copilot-agent
        run: |
          # Create a simple Dockerfile that uses pre-built output
          cat > Dockerfile.prebuilt << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 8080
          EXPOSE 8443

          # Create non-root user for security
          RUN groupadd -r copilot && useradd --no-log-init -r -g copilot copilot

          # Copy published application
          COPY ./publish .

          # Set ownership and permissions
          RUN chown -R copilot:copilot /app
          USER copilot

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
              CMD curl -f http://localhost:8080/api/github/health || exit 1

          # Set environment variables
          ENV ASPNETCORE_URLS=http://+:8080
          ENV ASPNETCORE_ENVIRONMENT=Production

          ENTRYPOINT ["dotnet", "CopilotAgent.dll"]
          EOF
          
          # Create ACR if it doesn't exist
          if ! az acr show --name $ACR_NAME >/dev/null 2>&1; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --name $ACR_NAME \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --sku Basic \
              --location ${{ env.AZURE_LOCATION }}
          fi
          
          # Build and push to ACR
          az acr build \
            --registry $ACR_NAME \
            --image $IMAGE_NAME:latest \
            --image $IMAGE_NAME:${{ github.sha }} \
            --file Dockerfile.prebuilt \
            .
          
          echo "image_url=$ACR_NAME.azurecr.io/$IMAGE_NAME:latest" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Deploy to Azure Container Apps
        id: deploy
        env:
          ACR_NAME: copilotpowerplatformacr
        run: |
          # Check if Container Apps environment exists
          if ! az containerapp env show --name ${{ env.CONTAINER_APP_ENV }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}
          fi
          
          # Enable admin access for ACR (required for Container Apps)
          az acr update --name $ACR_NAME --admin-enabled true
          
          # Get ACR admin credentials
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --query "passwords[0].value" -o tsv)
          
          # Check if Container App exists
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Updating existing Container App..."
            
            # Update secrets first
            az containerapp secret set \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --secrets \
                "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}" \
                "acr-password=$ACR_PASSWORD"
            
            # Update container app with ACR image
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image ${{ needs.build.outputs.image_url }} \
              --registry-server $ACR_NAME.azurecr.io \
              --registry-username $ACR_USERNAME \
              --registry-password $ACR_PASSWORD \
              --replace-env-vars \
                "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" \
                "ASPNETCORE_ENVIRONMENT=Production" \
                "ASPNETCORE_URLS=http://+:8080" \
                "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
              --cpu 1.0 \
              --memory 2.0Gi \
              --min-replicas 1 \
              --max-replicas 3
          else
            echo "Creating new Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENV }} \
              --image ${{ needs.build.outputs.image_url }} \
              --registry-server $ACR_NAME.azurecr.io \
              --registry-username $ACR_USERNAME \
              --registry-password $ACR_PASSWORD \
              --target-port 8080 \
              --ingress external \
              --secrets "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}" \
              --env-vars "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" "ASPNETCORE_ENVIRONMENT=Production" "ASPNETCORE_URLS=http://+:8080" "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
              --cpu 1.0 \
              --memory 2.0Gi \
              --min-replicas 1 \
              --max-replicas 3
          fi
          
          # Get container app information
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Validate Deployment
        run: |
          echo "üéâ Deployment successful!"
          echo "üìç Container App FQDN: ${{ steps.deploy.outputs.fqdn }}"
          echo "üîó Webhook URL: https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "üîó Health Check: https://${{ steps.deploy.outputs.fqdn }}/api/github/health"
          echo "üîó Test Endpoint: https://${{ steps.deploy.outputs.fqdn }}/api/github/test"
          echo "üîó MCP Capabilities: https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities"
          echo "üîó MCP SSE: https://${{ steps.deploy.outputs.fqdn }}/mcp/sse"
          
          # Wait for container to be ready and test health endpoint
          echo "‚è≥ Waiting for container app to be ready..."
          sleep 60
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://${{ steps.deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            else
              echo "‚è≥ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "üß™ Testing MCP capabilities endpoint..."
          curl -f "https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities" || echo "‚ö†Ô∏è MCP capabilities endpoint not responding"

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.NGL_DEVOPS_APP_ID }}
          private-key: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Update GitHub App Webhook URL
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          WEBHOOK_URL="https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "üìù Updating GitHub App webhook URL to: $WEBHOOK_URL"
          
          # Get current GitHub App configuration
          CURRENT_CONFIG=$(gh api /app/hook/config)
          echo "Current webhook config: $CURRENT_CONFIG"
          
          # Update the webhook URL using GitHub CLI with app-level token
          gh api \
            --method PATCH \
            /app/hook/config \
            -f url="$WEBHOOK_URL" \
            -f content_type="json" \
            -f insecure_ssl="0"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully updated GitHub App webhook URL"
          else
            echo "‚ùå Failed to update GitHub App webhook URL"
            exit 1
          fi

      - name: Summary
        run: |
          echo "üöÄ **Deployment Complete!**"
          echo ""
          echo "### üìç Endpoints"
          echo "- **App URL**: https://${{ steps.deploy.outputs.fqdn }}"
          echo "- **Health Check**: https://${{ steps.deploy.outputs.fqdn }}/api/github/health"
          echo "- **Webhook**: https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "- **MCP Capabilities**: https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities"
          echo "- **MCP SSE**: https://${{ steps.deploy.outputs.fqdn }}/mcp/sse"
          echo ""
          echo "### üîß Next Steps"
          echo "1. Test the health endpoint"
          echo "2. Generate API keys using the workflow"
          echo "3. Test MCP tools integration"