name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/CopilotAgent.Tests/**'
      - 'src/Shared/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'github-copilot-bot'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      checks: write
      pull-requests: write
    outputs:
      image_url: ${{ steps.build_push.outputs.image_url }}
      image_url_sha: ${{ steps.build_push.outputs.image_url_sha }}
      image_url_semver: ${{ steps.build_push.outputs.image_url_semver }}
      semantic_version: ${{ steps.semver.outputs.version }}
      commit_sha: ${{ steps.build_push.outputs.commit_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for semantic versioning

      - name: Generate Semantic Version
        id: semver
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true
          search_commit_body: true
      
      - name: Validate Semantic Version
        run: |
          SEMANTIC_VERSION="${{ steps.semver.outputs.version }}"
          echo "🔍 Generated semantic version: $SEMANTIC_VERSION"
          
          # Validate semantic version format
          if [[ ! "$SEMANTIC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ ERROR: Invalid semantic version format: '$SEMANTIC_VERSION'"
            echo "Expected format: X.Y.Z (e.g., 1.1.3)"
            exit 1
          fi
          
          # Ensure version is not empty
          if [[ -z "$SEMANTIC_VERSION" ]]; then
            echo "❌ ERROR: Semantic version is empty"
            echo "This usually indicates missing git tags or configuration issues"
            exit 1
          fi
          
          echo "✅ Semantic version validation passed: $SEMANTIC_VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test with Coverage
        run: |
          echo "🏗️ Restoring dependencies..."
          dotnet restore src/CopilotAgent.sln
          
          echo "🔨 Building solution..."
          dotnet build src/CopilotAgent.sln -c Release --no-restore
          
          echo "🧪 Running tests with code coverage..."
          # Create test results directory
          mkdir -p TestResults
          
          # Run tests with code coverage (simplified approach)
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=TestResults.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings
          
          echo "📊 Code coverage completed - reports will be generated by GitHub Actions"
          
          echo "🚀 Publishing application..."
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish --no-build

      - name: Publish Test Results and Coverage
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Test Results'
          path: './TestResults/TestResults.trx'
          reporter: 'dotnet-trx'
          fail-on-error: false

      - name: Publish Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: './TestResults/**/coverage.cobertura.xml'
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Upload Coverage Reports as Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            ./TestResults/CoverageReport/
            ./TestResults/TestResults.trx
            ./TestResults/TestResults.xml
          retention-days: 30

      - name: Build and Push to GitHub Container Registry
        id: build_push
        env:
          REGISTRY: ghcr.io
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: copilot-powerplatform
          IMAGE_NAME: copilot-agent
          SEMANTIC_VERSION: ${{ steps.semver.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          # Debug: Print environment variables and versioning info
          echo "DEBUG: REGISTRY=$REGISTRY"
          echo "DEBUG: REPO_OWNER=$REPO_OWNER"
          echo "DEBUG: REPO_NAME=$REPO_NAME"
          echo "DEBUG: IMAGE_NAME=$IMAGE_NAME"
          echo "DEBUG: SEMANTIC_VERSION=$SEMANTIC_VERSION"
          echo "DEBUG: COMMIT_SHA=$COMMIT_SHA"
          echo "DEBUG: github.repository=${{ github.repository }}"
          echo "DEBUG: github.repository_owner=${{ github.repository_owner }}"
          echo "DEBUG: github.actor=${{ github.actor }}"
          
          # Construct the full image name using individual components and convert to lowercase
          FULL_IMAGE_NAME=$(echo "$REPO_OWNER/$REPO_NAME/$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "DEBUG: FULL_IMAGE_NAME=$FULL_IMAGE_NAME"
          
          # Validate that the components are not empty and image name is well-formed
          if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$IMAGE_NAME" ]]; then
            echo "ERROR: One or more image name components are empty"
            echo "REPO_OWNER='$REPO_OWNER', REPO_NAME='$REPO_NAME', IMAGE_NAME='$IMAGE_NAME'"
            exit 1
          fi
          
          if [[ -z "$SEMANTIC_VERSION" || -z "$COMMIT_SHA" ]]; then
            echo "ERROR: Missing versioning information"
            echo "SEMANTIC_VERSION='$SEMANTIC_VERSION', COMMIT_SHA='$COMMIT_SHA'"
            exit 1
          fi
          
          if [[ ! "$FULL_IMAGE_NAME" =~ ^[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+$ ]]; then
            echo "ERROR: FULL_IMAGE_NAME appears to be invalid: $FULL_IMAGE_NAME"
            echo "Expected format: owner/repository/image-name (lowercase)"
            exit 1
          fi
          
          # Build the Docker image using pre-built output and permanent Dockerfile
          echo "🏗️ Building Docker image with multiple tags..."
          docker build -t $REGISTRY/$FULL_IMAGE_NAME:latest .
          
          # Create multiple tags for the same image
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:${COMMIT_SHA:0:7}
          
          echo "📋 Created image tags:"
          echo "  - latest"
          echo "  - $SEMANTIC_VERSION (semantic version)"
          echo "  - $COMMIT_SHA (full SHA)"
          echo "  - ${COMMIT_SHA:0:7} (short SHA)"
          
          # Login to GitHub Container Registry using GitHub token
          echo "🔐 Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push all tags to GitHub Container Registry
          echo "📦 Pushing all image tags to registry..."
          docker push $REGISTRY/$FULL_IMAGE_NAME:latest
          docker push $REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION
          docker push $REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA
          docker push $REGISTRY/$FULL_IMAGE_NAME:${COMMIT_SHA:0:7}
          
          # Construct and validate the final image URLs
          FINAL_IMAGE_URL_LATEST="$REGISTRY/$FULL_IMAGE_NAME:latest"
          FINAL_IMAGE_URL_SHA="$REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA"
          FINAL_IMAGE_URL_SEMVER="$REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION"
          
          echo "DEBUG: Final image URLs:"
          echo "  Latest: $FINAL_IMAGE_URL_LATEST"
          echo "  SHA: $FINAL_IMAGE_URL_SHA"
          echo "  SemVer: $FINAL_IMAGE_URL_SEMVER"
          
          # Validate the image URL formats
          for url in "$FINAL_IMAGE_URL_LATEST" "$FINAL_IMAGE_URL_SHA" "$FINAL_IMAGE_URL_SEMVER"; do
            if [[ ! "$url" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:[a-zA-Z0-9._-]+$ ]]; then
              echo "ERROR: Generated image URL is invalid: $url"
              echo "Expected format: ghcr.io/owner/repository/image-name:tag"
              exit 1
            fi
          done
          
          # Set outputs for use in deployment
          echo "image_url=$FINAL_IMAGE_URL_LATEST" >> $GITHUB_OUTPUT
          echo "image_url_sha=$FINAL_IMAGE_URL_SHA" >> $GITHUB_OUTPUT
          echo "image_url_semver=$FINAL_IMAGE_URL_SEMVER" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ SUCCESS: All image tags validated and pushed:"
          echo "  🏷️  Latest: $FINAL_IMAGE_URL_LATEST"
          echo "  🏷️  SHA: $FINAL_IMAGE_URL_SHA"
          echo "  🏷️  SemVer: $FINAL_IMAGE_URL_SEMVER"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
      packages: read
      
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Wait for Container App Operations to Complete
        run: |
          echo "🔍 Checking for ongoing Container App operations..."
          
          # Function to check operation status
          check_operations() {
            local operations=$(az containerapp operation list \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "[?properties.provisioningState=='InProgress']" \
              --output tsv 2>/dev/null || echo "")
            
            if [[ -n "$operations" ]]; then
              echo "⏳ Operations in progress detected"
              return 1
            else
              echo "✅ No operations in progress"
              return 0
            fi
          }
          
          # Wait for operations to complete with exponential backoff
          max_attempts=12
          attempt=1
          base_delay=10
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Attempt $attempt/$max_attempts - Checking operation status..."
            
            if check_operations; then
              echo "✅ All operations completed - proceeding with deployment"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ Maximum wait time exceeded - operations still in progress"
              echo "⚠️  Proceeding with deployment anyway (Azure may handle conflicts)"
              break
            fi
            
            # Calculate delay with exponential backoff (capped at 5 minutes)
            delay=$((base_delay * (2 ** (attempt - 1))))
            if [ $delay -gt 300 ]; then
              delay=300
            fi
            
            echo "⏱️  Waiting ${delay}s before next check..."
            sleep $delay
            attempt=$((attempt + 1))
          done

      - name: Deploy to Azure Container Apps
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build.outputs.image_url_sha }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENV }}
          location: ${{ env.AZURE_LOCATION }}
          targetPort: 8080
          ingress: external
          environmentVariables: |
            NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}
            NGL_DEVOPS_WEBHOOK_SECRET=${{ secrets.NGL_DEVOPS_WEBHOOK_SECRET }}
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:8080
            COPILOT_VERSION=${{ needs.build.outputs.semantic_version }}
            COPILOT_COMMIT_SHA=${{ needs.build.outputs.commit_sha }}

      - name: Configure Container App Resources and Secrets
        run: |
          echo "🔍 Checking if configuration update is needed..."
          
          # Skip configuration if this is a routine deployment and config is already set
          NEEDS_CONFIG_UPDATE=false
          
          # Check if container app exists and has required secrets
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            EXISTING_SECRETS=$(az containerapp secret list --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[].name" -o tsv 2>/dev/null || echo "")
            
            if [[ "$EXISTING_SECRETS" != *"ngl-devops-private-key"* ]] || [[ "$EXISTING_SECRETS" != *"ngl-devops-webhook-secret"* ]]; then
              echo "🔑 Missing secrets detected, configuration update needed"
              NEEDS_CONFIG_UPDATE=true
            else
              echo "✅ Secrets already configured, skipping configuration to avoid unnecessary restart"
              echo "💡 This saves one container restart cycle!"
              exit 0
            fi
          else
            echo "🆕 New deployment detected, configuration required"
            NEEDS_CONFIG_UPDATE=true
          fi
          
          echo "🔧 Proceeding with container app configuration..."
          
          # Validate required secrets exist and are not empty
          echo "🔍 Validating GitHub secrets..."
          
          PRIVATE_KEY_SECRET="${{ secrets.NGL_DEVOPS_PRIVATE_KEY }}"
          WEBHOOK_SECRET="${{ secrets.NGL_DEVOPS_WEBHOOK_SECRET }}"
          
          if [[ -z "$PRIVATE_KEY_SECRET" ]]; then
            echo "❌ ERROR: GitHub secret 'NGL_DEVOPS_PRIVATE_KEY' is not set or is empty"
            echo "📝 Please set this secret in repository settings"
            exit 1
          fi
          
          if [[ -z "$WEBHOOK_SECRET" ]]; then
            echo "❌ ERROR: GitHub secret 'NGL_DEVOPS_WEBHOOK_SECRET' is not set or is empty"
            echo "📝 Please set this secret in repository settings"
            exit 1
          fi
          
          echo "✅ Required secrets validation passed"
          
          # Function to perform configuration with retry logic
          configure_with_retry() {
            local max_attempts=5
            local attempt=1
            local base_delay=15
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Configuration attempt $attempt/$max_attempts"
              
              # Check if any operations are in progress before configuration
              if az containerapp operation list \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --query "[?properties.provisioningState=='InProgress']" \
                --output tsv 2>/dev/null | grep -q .; then
                
                echo "⏳ Operations still in progress, waiting before configuration..."
                delay=$((base_delay * attempt))
                sleep $delay
                attempt=$((attempt + 1))
                continue
              fi
              
              echo "🔐 Setting container app secrets..."
              echo "📝 Secret names being set: ngl-devops-private-key, ngl-devops-webhook-secret"
              
              if az containerapp secret set \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --secrets "ngl-devops-private-key=$PRIVATE_KEY_SECRET" \
                          "ngl-devops-webhook-secret=$WEBHOOK_SECRET"; then
                
                echo "🔧 Updating container app configuration..."
                if az containerapp update \
                  --name ${{ env.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --set-env-vars "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
                                "NGL_DEVOPS_WEBHOOK_SECRET=secretref:ngl-devops-webhook-secret" \
                  --cpu 1.0 \
                  --memory 2.0Gi \
                  --min-replicas 1 \
                  --max-replicas 3; then
                  
                  echo "✅ Container app configuration completed successfully"
                  return 0
                fi
              else
                echo "❌ Secret configuration failed"
                echo "🔍 Checking Azure CLI error details..."
                
                # Show more detailed error information
                az containerapp secret list \
                  --name ${{ env.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --output table 2>/dev/null || echo "Could not list existing secrets"
                
                echo "🔍 Current container app status:"
                az containerapp show \
                  --name ${{ env.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --query "properties.provisioningState" -o tsv 2>/dev/null || echo "Could not get status"
              fi
              
              echo "⚠️  Configuration attempt $attempt failed"
              if [ $attempt -lt $max_attempts ]; then
                delay=$((base_delay * attempt))
                echo "⏱️  Retrying in ${delay}s..."
                sleep $delay
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "❌ Configuration failed after $max_attempts attempts"
            echo "📋 Final diagnostic information:"
            echo "  - Container App: ${{ env.CONTAINER_APP_NAME }}"
            echo "  - Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
            echo "  - Private Key Secret Length: ${#PRIVATE_KEY_SECRET}"
            echo "  - Webhook Secret Length: ${#WEBHOOK_SECRET}"
            return 1
          }
          
          # Execute configuration with retry logic
          if ! configure_with_retry; then
            echo "🚨 Container app configuration failed - checking if deployment is still functional..."
            
            # Check if basic deployment is working despite configuration failure
            if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv | grep -q "Succeeded"; then
              echo "⚠️  Deployment appears successful despite configuration issues"
              echo "📝 This may indicate missing secrets or temporary Azure API issues"
              echo "💡 Possible solutions:"
              echo "   1. Check GitHub repository secrets are properly set"
              echo "   2. Verify Azure Container Apps service is operational"
              echo "   3. Manual secret configuration may be required"
            else
              echo "❌ Deployment verification failed"
              exit 1
            fi
          fi

      - name: Validate Deployment and Get FQDN
        id: validate_deploy
        run: |
          # Validate the image URLs from build output
          IMAGE_URL_LATEST="${{ needs.build.outputs.image_url }}"
          IMAGE_URL_SHA="${{ needs.build.outputs.image_url_sha }}"
          IMAGE_URL_SEMVER="${{ needs.build.outputs.image_url_semver }}"
          SEMANTIC_VERSION="${{ needs.build.outputs.semantic_version }}"
          COMMIT_SHA="${{ needs.build.outputs.commit_sha }}"
          
          echo "🔍 Validating deployment artifacts..."
          echo "📋 Image URLs received from build:"
          echo "  Latest: $IMAGE_URL_LATEST"
          echo "  SHA: $IMAGE_URL_SHA"
          echo "  SemVer: $IMAGE_URL_SEMVER"
          echo "  Version: $SEMANTIC_VERSION"
          echo "  Commit: $COMMIT_SHA"
          
          # Validate all image URLs are present
          if [[ -z "$IMAGE_URL_LATEST" || -z "$IMAGE_URL_SHA" || -z "$IMAGE_URL_SEMVER" ]]; then
            echo "ERROR: Missing image URLs from build job"
            echo "Latest: '$IMAGE_URL_LATEST', SHA: '$IMAGE_URL_SHA', SemVer: '$IMAGE_URL_SEMVER'"
            exit 1
          fi
          
          if [[ -z "$SEMANTIC_VERSION" || -z "$COMMIT_SHA" ]]; then
            echo "ERROR: Missing version information from build job"
            echo "Version: '$SEMANTIC_VERSION', Commit: '$COMMIT_SHA'"
            exit 1
          fi
          
          # Validate image URL formats
          for url in "$IMAGE_URL_LATEST" "$IMAGE_URL_SHA" "$IMAGE_URL_SEMVER"; do
            if [[ ! "$url" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:[a-zA-Z0-9._-]+$ ]]; then
              echo "ERROR: Invalid image URL format: $url"
              echo "Expected format: ghcr.io/owner/repository/image-name:tag"
              exit 1
            fi
          done
          
          echo "✅ All image URLs validated successfully"
          
          # Get container app FQDN
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "semantic_version=$SEMANTIC_VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Validate Deployment
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Container App FQDN: ${{ steps.validate_deploy.outputs.fqdn }}"
          echo "🔗 Webhook URL: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "🔗 Health Check: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "🔗 Test Endpoint: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/test"
          echo "🔗 MCP Capabilities: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "🔗 MCP SSE: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          
          # Wait for container to be ready and test health endpoint
          echo "⏳ Waiting for container app to be ready..."
          sleep 60
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "🧪 Testing MCP capabilities endpoint..."
          curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities" || echo "⚠️ MCP capabilities endpoint not responding"

 

      - name: Summary
        run: |
          echo "🚀 **Deployment Complete!**"
          echo ""
          echo "### 📦 Version Information"
          echo "- **Semantic Version**: ${{ steps.validate_deploy.outputs.semantic_version }}"
          echo "- **Commit SHA**: ${{ steps.validate_deploy.outputs.commit_sha }}"
          echo "- **Container Image**: ${{ needs.build.outputs.image_url_sha }}"
          echo ""
          echo "### � Endpoints"
          echo "- **App URL**: https://${{ steps.validate_deploy.outputs.fqdn }}"
          echo "- **Health Check**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "- **Webhook**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "- **MCP Capabilities**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "- **MCP SSE**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          echo ""
          echo "### 🏷️ Available Container Tags"
          echo "- **Latest**: ${{ needs.build.outputs.image_url }}"
          echo "- **Semantic Version**: ${{ needs.build.outputs.image_url_semver }}"
          echo "- **SHA**: ${{ needs.build.outputs.image_url_sha }}"
          echo ""
          echo "### 🔧 Next Steps"
          echo "1. Test the health endpoint"
          echo "2. Generate API keys using the workflow"
          echo "3. Test MCP tools integration"
          echo "4. Monitor application version: ${{ steps.validate_deploy.outputs.semantic_version }}"
      - name: Validate Endpoint Security
        run: |
          FQDN="${{ steps.validate_deploy.outputs.fqdn }}"
          echo "🔒 Validating endpoint security at $FQDN"

          # Health endpoint should be publicly accessible for monitoring
          echo "\n[1/3] Testing /api/github/health endpoint (should be public)"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$FQDN/api/github/health")
          echo "Status code: $STATUS_CODE"
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ Health endpoint is publicly accessible ($STATUS_CODE)"
          else
            echo "⚠️ Health endpoint returned $STATUS_CODE - may indicate deployment issues"
          fi

          # Test webhook endpoint without signature (should fail with 401)
          echo "\n[2/3] Testing /api/github/webhook without signature (should fail)"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d '{"test":"data"}' "https://$FQDN/api/github/webhook")
          echo "Status code: $STATUS_CODE"
          if [[ "$STATUS_CODE" == "401" || "$STATUS_CODE" == "400" ]]; then
            echo "✅ Webhook endpoint correctly rejects unsigned requests ($STATUS_CODE)"
          else
            echo "⚠️ Webhook endpoint returned $STATUS_CODE instead of 401/400"
          fi

          # Test general API endpoints availability
          echo "\n[3/3] Testing additional endpoints availability"
          for endpoint in "test" "installation-info"; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$FQDN/api/github/$endpoint")
            echo "Endpoint /api/github/$endpoint: $STATUS_CODE"
            if [[ "$STATUS_CODE" == "200" || "$STATUS_CODE" == "500" ]]; then
              echo "✅ Endpoint $endpoint is reachable"
            else
              echo "⚠️ Endpoint $endpoint may have issues ($STATUS_CODE)"
            fi
          done
          
          echo "🔒 Security validation completed - health endpoint properly public, webhook properly protected"