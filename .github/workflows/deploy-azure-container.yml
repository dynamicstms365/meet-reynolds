name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'github-copilot-bot'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_url: ${{ steps.build_push.outputs.image_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test
        run: |
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish          

      - name: Build and Push to GitHub Container Registry
        id: build_push
        env:
          REGISTRY: ghcr.io
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: copilot-powerplatform
          IMAGE_NAME: copilot-agent
        run: |
          # Debug: Print environment variables and repository info
          echo "DEBUG: REGISTRY=$REGISTRY"
          echo "DEBUG: REPO_OWNER=$REPO_OWNER"
          echo "DEBUG: REPO_NAME=$REPO_NAME"
          echo "DEBUG: IMAGE_NAME=$IMAGE_NAME"
          echo "DEBUG: github.repository=${{ github.repository }}"
          echo "DEBUG: github.repository_owner=${{ github.repository_owner }}"
          echo "DEBUG: github.actor=${{ github.actor }}"
          echo "DEBUG: github.sha=${{ github.sha }}"
          
          # Construct the full image name using individual components and convert to lowercase
          FULL_IMAGE_NAME=$(echo "$REPO_OWNER/$REPO_NAME/$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "DEBUG: FULL_IMAGE_NAME=$FULL_IMAGE_NAME"
          
          # Validate that the components are not empty and image name is well-formed
          if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$IMAGE_NAME" ]]; then
            echo "ERROR: One or more image name components are empty"
            echo "REPO_OWNER='$REPO_OWNER', REPO_NAME='$REPO_NAME', IMAGE_NAME='$IMAGE_NAME'"
            exit 1
          fi
          
          if [[ ! "$FULL_IMAGE_NAME" =~ ^[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+$ ]]; then
            echo "ERROR: FULL_IMAGE_NAME appears to be invalid: $FULL_IMAGE_NAME"
            echo "Expected format: owner/repository/image-name (lowercase)"
            exit 1
          fi
          # Build the Docker image using pre-built output and permanent Dockerfile
          docker build -t $REGISTRY/$FULL_IMAGE_NAME:latest .
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:${{ github.sha }}
          
          # Login to GitHub Container Registry using GitHub token
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push to GitHub Container Registry
          docker push $REGISTRY/$FULL_IMAGE_NAME:latest
          docker push $REGISTRY/$FULL_IMAGE_NAME:${{ github.sha }}
          
          # Construct and validate the final image URL
          FINAL_IMAGE_URL="$REGISTRY/$FULL_IMAGE_NAME:latest"
          echo "DEBUG: Final image URL: $FINAL_IMAGE_URL"
          
          # Validate the image URL format
          if [[ ! "$FINAL_IMAGE_URL" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:(latest|[a-z0-9._-]+)$ ]]; then
            echo "ERROR: Generated image URL is invalid: $FINAL_IMAGE_URL"
            echo "Expected format: ghcr.io/owner/repository/image-name:tag (lowercase)"
            exit 1
          fi
          
          echo "image_url=$FINAL_IMAGE_URL" >> $GITHUB_OUTPUT
          echo "SUCCESS: Image URL validated and set: $FINAL_IMAGE_URL"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
      packages: read
      
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Deploy to Azure Container Apps
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build.outputs.image_url }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENV }}
          location: ${{ env.AZURE_LOCATION }}
          targetPort: 8080
          ingress: external
          environmentVariables: |
            NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:8080

      - name: Configure Container App Resources and Secrets
        run: |
          echo "🔧 Configuring container app resources and secrets..."
          
          # Set secrets
          az containerapp secret set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --secrets "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}"
          
          # Update container app with resource constraints and secret reference
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --set-env-vars "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
            --cpu 1.0 \
            --memory 2.0Gi \
            --min-replicas 1 \
            --max-replicas 3
          
          echo "✅ Container app configuration completed"

      - name: Validate Image URL and Get FQDN
        id: validate_deploy
        run: |
          # Validate the image URL from build output
          IMAGE_URL="${{ needs.build.outputs.image_url }}"
          echo "DEBUG: Received image URL: $IMAGE_URL"
          
          # Validate image URL format
          if [[ -z "$IMAGE_URL" ]]; then
            echo "ERROR: No image URL received from build job"
            exit 1
          fi
          
          if [[ ! "$IMAGE_URL" =~ ^ghcr\.io/[a-z0-9._-]+/[a-z0-9._-]+/[a-z0-9._-]+:(latest|[a-z0-9._-]+)$ ]]; then
            echo "ERROR: Invalid image URL format received: $IMAGE_URL"
            echo "Expected format: ghcr.io/owner/repository/image-name:tag (lowercase)"
            exit 1
          fi
          
          echo "SUCCESS: Image URL validation passed: $IMAGE_URL"
          
          # Get container app FQDN
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT

      - name: Validate Deployment
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Container App FQDN: ${{ steps.validate_deploy.outputs.fqdn }}"
          echo "🔗 Webhook URL: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "🔗 Health Check: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "🔗 Test Endpoint: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/test"
          echo "🔗 MCP Capabilities: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "🔗 MCP SSE: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          
          # Wait for container to be ready and test health endpoint
          echo "⏳ Waiting for container app to be ready..."
          sleep 60
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "🧪 Testing MCP capabilities endpoint..."
          curl -f "https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities" || echo "⚠️ MCP capabilities endpoint not responding"

 

      - name: Summary
        run: |
          echo "🚀 **Deployment Complete!**"
          echo ""
          echo "### 📍 Endpoints"
          echo "- **App URL**: https://${{ steps.validate_deploy.outputs.fqdn }}"
          echo "- **Health Check**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "- **Webhook**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "- **MCP Capabilities**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "- **MCP SSE**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/sse"
          echo ""
          echo "### 🔧 Next Steps"
          echo "1. Test the health endpoint"
          echo "2. Generate API keys using the workflow"
          echo "3. Test MCP tools integration"
      - name: Validate Endpoint Security
        run: |
          FQDN="${{ steps.validate_deploy.outputs.fqdn }}"
          echo "🔒 Validating endpoint security at $FQDN"

          # 1. Test without token (should fail with 401/403)
          echo "\n[1/2] Testing /api/github/health without token (should fail)"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$FQDN/api/github/health")
          echo "Status code: $STATUS_CODE"
          if [[ "$STATUS_CODE" == "401" || "$STATUS_CODE" == "403" ]]; then
            echo "✅ Endpoint correctly rejects unauthenticated requests ($STATUS_CODE)"
          else
            echo "❌ Expected 401/403, got $STATUS_CODE"
            exit 1
          fi

          # 2. Test with valid token (should succeed)
          echo "\n[2/2] Testing /api/github/health with valid token (should succeed)"
          TOKEN="${{ steps.generate_jwt.outputs.token }}"
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $TOKEN" "https://$FQDN/api/github/health")
          echo "Status code: $STATUS_CODE"
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "✅ Endpoint accepts valid token ($STATUS_CODE)"
          else
            echo "❌ Expected 200, got $STATUS_CODE"
            exit 1
          fi