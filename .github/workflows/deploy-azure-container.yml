name: Deploy GitHub App Service to Azure

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-azure-container.yml'
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'github-copilot-bot'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test
        run: |
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish          

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}          

      - name: Build and Push to GitHub Container Registry
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}/copilot-agent
        run: |
          # Create a simple Dockerfile that uses pre-built output
          cat > Dockerfile.prebuilt << 'EOF'
          FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
          WORKDIR /app
          EXPOSE 8080
          EXPOSE 8443

          # Create non-root user for security
          RUN groupadd -r copilot && useradd --no-log-init -r -g copilot copilot

          # Copy published application
          COPY ./publish .

          # Set ownership and permissions
          RUN chown -R copilot:copilot /app
          USER copilot

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
              CMD curl -f http://localhost:8080/api/github/health || exit 1

          # Set environment variables
          ENV ASPNETCORE_URLS=http://+:8080
          ENV ASPNETCORE_ENVIRONMENT=Production

          ENTRYPOINT ["dotnet", "CopilotAgent.dll"]
          EOF
          
          # Build the Docker image using pre-built output
          docker build -f Dockerfile.prebuilt -t $REGISTRY/$IMAGE_NAME:latest .
          docker tag $REGISTRY/$IMAGE_NAME:latest $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push to GitHub Container Registry
          docker push $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          
          # Make the package public so Azure can pull it
          GH_TOKEN=${{ secrets.GITHUB_TOKEN }} gh api \
            --method PATCH \
            /user/packages/container/copilot-powerplatform%2Fcopilot-agent \
            -f visibility=public || echo "⚠️ Could not make package public - may need manual intervention"
          
          echo "image_url=$REGISTRY/$IMAGE_NAME:latest" >> $GITHUB_OUTPUT          
        id: build_push

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Deploy to Azure Container Apps
        id: deploy
        run: |
          # Check if Container Apps environment exists
          if ! az containerapp env show --name ${{ env.CONTAINER_APP_ENV }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --location ${{ env.AZURE_LOCATION }}
          fi
          
          # Check if Container App exists
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "Updating existing Container App..."
            
            # Update secrets first
            WEBHOOK_SECRET="${{ secrets.NGL_DEVOPS_WEBHOOK_SECRET }}"
            if [ -n "$WEBHOOK_SECRET" ]; then
              az containerapp secret set \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --secrets \
                  "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}" \
                  "ngl-devops-webhook-secret=$WEBHOOK_SECRET"
              
              # Update with webhook secret
              az containerapp update \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ steps.build_push.outputs.image_url }} \
                --registry-server ghcr.io \
                --registry-username ${{ github.actor }} \
                --registry-password ${{ secrets.GITHUB_TOKEN }} \
                --replace-env-vars \
                  "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" \
                  "ASPNETCORE_ENVIRONMENT=Production" \
                  "ASPNETCORE_URLS=http://+:8080" \
                  "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
                  "NGL_DEVOPS_WEBHOOK_SECRET=secretref:ngl-devops-webhook-secret" \
                --cpu 1.0 \
                --memory 2.0Gi \
                --min-replicas 1 \
                --max-replicas 3
            else
              az containerapp secret set \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --secrets \
                  "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}"
              
              # Update without webhook secret
              az containerapp update \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --image ${{ steps.build_push.outputs.image_url }} \
                --registry-server ghcr.io \
                --registry-username ${{ github.actor }} \
                --registry-password ${{ secrets.GITHUB_TOKEN }} \
                --replace-env-vars \
                  "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" \
                  "ASPNETCORE_ENVIRONMENT=Production" \
                  "ASPNETCORE_URLS=http://+:8080" \
                  "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
                --cpu 1.0 \
                --memory 2.0Gi \
                --min-replicas 1 \
                --max-replicas 3
            fi
          else
            echo "Creating new Container App..."
            WEBHOOK_SECRET="${{ secrets.NGL_DEVOPS_WEBHOOK_SECRET }}"
            if [ -n "$WEBHOOK_SECRET" ]; then
              az containerapp create \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_APP_ENV }} \
                --image ${{ steps.build_push.outputs.image_url }} \
                --registry-server ghcr.io \
                --registry-username ${{ github.actor }} \
                --registry-password ${{ github.token }} \
                --target-port 8080 \
                --ingress external \
                --secrets "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }} ngl-devops-webhook-secret=$WEBHOOK_SECRET" \
                --env-vars "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" "ASPNETCORE_ENVIRONMENT=Production" "ASPNETCORE_URLS=http://+:8080" "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" "NGL_DEVOPS_WEBHOOK_SECRET=secretref:ngl-devops-webhook-secret" \
                --cpu 1.0 \
                --memory 2.0Gi \
                --min-replicas 1 \
                --max-replicas 3
            else
              az containerapp create \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --environment ${{ env.CONTAINER_APP_ENV }} \
                --image ${{ steps.build_push.outputs.image_url }} \
                --registry-server ghcr.io \
                --registry-username ${{ github.actor }} \
                --registry-password ${{ secrets.GITHUB_TOKEN }} \
                --target-port 8080 \
                --ingress external \
                --secrets "ngl-devops-private-key=${{ secrets.NGL_DEVOPS_BOT_PEM }}" \
                --env-vars "NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}" "ASPNETCORE_ENVIRONMENT=Production" "ASPNETCORE_URLS=http://+:8080" "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
                --cpu 1.0 \
                --memory 2.0Gi \
                --min-replicas 1 \
                --max-replicas 3
            fi
          fi
          
          # Get container app information
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT          

      - name: Validate Deployment
        run: |
          echo "🎉 Deployment successful!"
          echo "📍 Container App FQDN: ${{ steps.deploy.outputs.fqdn }}"
          echo "🔗 Webhook URL: https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "🔗 Health Check: https://${{ steps.deploy.outputs.fqdn }}/api/github/health"
          echo "🔗 Test Endpoint: https://${{ steps.deploy.outputs.fqdn }}/api/github/test"
          echo "🔗 MCP Capabilities: https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities"
          echo "🔗 MCP SSE: https://${{ steps.deploy.outputs.fqdn }}/mcp/sse"
          
          # Wait for container to be ready and test health endpoint
          echo "⏳ Waiting for container app to be ready..."
          sleep 60
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://${{ steps.deploy.outputs.fqdn }}/api/github/health" 2>/dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "⏳ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "🧪 Testing MCP capabilities endpoint..."
          curl -f "https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities" || echo "⚠️ MCP capabilities endpoint not responding"         

      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.NGL_DEVOPS_APP_ID }}
          private-key: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Update GitHub App Webhook URL
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          WEBHOOK_URL="https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook"
          echo "📝 Updating GitHub App webhook URL to: $WEBHOOK_URL"
          
          # Get current GitHub App configuration
          CURRENT_CONFIG=$(gh api /app/hook/config)
          echo "Current webhook config: $CURRENT_CONFIG"
          
          # Update the webhook URL using GitHub CLI with app-level token
          gh api \
            --method PATCH \
            /app/hook/config \
            -f url="$WEBHOOK_URL" \
            -f content_type="json" \
            -f insecure_ssl="0"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully updated GitHub App webhook URL"
            echo "🔗 New webhook URL: $WEBHOOK_URL"
          else
            echo "❌ Failed to update GitHub App webhook URL"
            echo "💡 Please manually update in GitHub App settings"
          fi
          
          # Verify the update
          UPDATED_CONFIG=$(gh api /app/hook/config)
          echo "Updated webhook config: $UPDATED_CONFIG"
                    
      - name: Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🚀 Enhanced GitHub Copilot Bot Deployment Summary
          
          ### ✅ Deployment Status: SUCCESS
          
          | Property | Value |
          |----------|-------|
          | **Container App FQDN** | \`${{ steps.deploy.outputs.fqdn }}\` |
          | **Webhook URL** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/webhook\` |
          | **Health Check** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/health\` |
          | **Test Endpoint** | \`https://${{ steps.deploy.outputs.fqdn }}/api/github/test\` |
          | **MCP Capabilities** | \`https://${{ steps.deploy.outputs.fqdn }}/mcp/capabilities\` |
          | **MCP SSE Stream** | \`https://${{ steps.deploy.outputs.fqdn }}/mcp/sse\` |
          
          ### 🔧 Enhanced Features Deployed:
          - ✅ **Semantic Search** - Cross-repository search with relevance scoring
          - ✅ **Discussion Management** - Create, search, update discussions with duplicate detection
          - ✅ **Issue Management** - Create, search, update issues with validation
          - ✅ **MCP Server** - 12 specialized tools for AI agent integration
          - ✅ **Workflow Orchestration** - Event-driven processing and automation
          - ✅ **Organization-wide Operations** - Manage content across 30+ repositories
          
          ### 🛠️ MCP Tools Available:
          1. **semantic_search** - Cross-repository semantic search
          2. **create_discussion** - Create discussions with duplicate detection
          3. **create_issue** - Create issues with validation
          4. **add_comment** - Add comments to discussions/issues
          5. **update_content** - Update existing content
          6. **get_discussion** - Retrieve specific discussions
          7. **get_issue** - Retrieve specific issues
          8. **search_discussions** - Search discussions specifically
          9. **search_issues** - Search issues specifically
          10. **organization_discussions** - Get all org discussions
          11. **organization_issues** - Get all org issues
          12. **prompt_action** - Natural language action execution
          
          ### 📋 Next Steps:
          1. Update GitHub App webhook URL in organization settings
          2. Test webhook delivery from GitHub
          3. Test MCP integration with other AI agents
          4. Monitor container app logs and metrics
          
          ### 🔧 Management Commands:
          \`\`\`bash
          # View container app logs
          az containerapp logs show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          
          # Scale container app
          az containerapp update --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --min-replicas 1 --max-replicas 5
          
          # View container app status
          az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          \`\`\`
          EOF