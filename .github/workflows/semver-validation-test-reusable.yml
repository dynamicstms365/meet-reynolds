name: Semantic Version Validation Test Component
on:
  workflow_call:
    inputs:
      test_version:
        required: true
        type: string
        description: "Version to test"
      expected_result:
        required: true
        type: string
        description: "Expected result: 'pass' or 'fail'"
      test_name:
        required: true
        type: string
        description: "Test case name"
    outputs:
      test_result:
        description: "Test execution result"
        value: ${{ jobs.validate_semver.outputs.result }}

jobs:
  validate_semver:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.test_outcome.outputs.result }}
    steps:
      - name: Test Semantic Version Validation
        id: validation
        run: |
          SEMANTIC_VERSION="${{ inputs.test_version }}"
          echo "🧪 Testing version: '$SEMANTIC_VERSION'"
          echo "📋 Test case: ${{ inputs.test_name }}"
          echo "🎯 Expected result: ${{ inputs.expected_result }}"
          
          # Set validation result to false initially
          VALIDATION_PASSED=false
          
          # Validate semantic version format (reject leading zeros, allow single 0)
          if [[ ! "$SEMANTIC_VERSION" =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
            echo "❌ VALIDATION: Invalid semantic version format: '$SEMANTIC_VERSION'"
            echo "Expected format: X.Y.Z (e.g., 1.1.3)"
          else
            # Ensure version is not empty
            if [[ -z "$SEMANTIC_VERSION" ]]; then
              echo "❌ VALIDATION: Semantic version is empty"
              echo "This usually indicates missing git tags or configuration issues"
            else
              echo "✅ VALIDATION: Semantic version validation passed: $SEMANTIC_VERSION"
              VALIDATION_PASSED=true
            fi
          fi
          
          echo "validation_passed=$VALIDATION_PASSED" >> $GITHUB_OUTPUT
          
      - name: Evaluate Test Outcome
        id: test_outcome
        run: |
          VALIDATION_PASSED="${{ steps.validation.outputs.validation_passed }}"
          EXPECTED_RESULT="${{ inputs.expected_result }}"
          
          echo "🔍 Validation result: $VALIDATION_PASSED"
          echo "🎯 Expected result: $EXPECTED_RESULT"
          
          # Determine if test passed based on expected outcome
          if [[ "$EXPECTED_RESULT" == "pass" && "$VALIDATION_PASSED" == "true" ]]; then
            echo "✅ TEST PASSED: Version correctly validated as valid"
            echo "result=PASS" >> $GITHUB_OUTPUT
          elif [[ "$EXPECTED_RESULT" == "fail" && "$VALIDATION_PASSED" == "false" ]]; then
            echo "✅ TEST PASSED: Version correctly identified as invalid"
            echo "result=PASS" >> $GITHUB_OUTPUT
          else
            echo "❌ TEST FAILED: Unexpected validation result"
            echo "Expected: $EXPECTED_RESULT, Got: $VALIDATION_PASSED"
            echo "result=FAIL" >> $GITHUB_OUTPUT
            exit 1
          fi