name: ALM Process Orchestrator

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    branches: [main, develop]
  pull_request_review:
    types: [submitted, dismissed]
  check_suite:
    types: [completed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to analyze (optional)'
        required: false
        type: string

jobs:
  alm_orchestrator:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.NGL_DEVOPS_APP_ID }}
          private-key: ${{ secrets.NGL_DEVOPS_BOT_PEM }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0

      - name: Install GitHub CLI Copilot
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          gh extension install github/gh-copilot || gh extension upgrade github/gh-copilot
          gh copilot --version

      - name: Determine PR to analyze
        id: pr_detection
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.pr_number }}" ]]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "Using manually specified PR: $PR_NUMBER"
          elif [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_review" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "Using PR from event: $PR_NUMBER"
          elif [[ "${{ github.event_name }}" == "check_suite" ]]; then
            # Find PR associated with the check suite
            PR_NUMBER=$(gh pr list --head "${{ github.event.check_suite.head_branch }}" --json number --jq '.[0].number // empty')
            if [[ -z "$PR_NUMBER" ]]; then
              echo "No PR found for check suite on branch ${{ github.event.check_suite.head_branch }}"
              exit 0
            fi
            echo "Using PR from check suite: $PR_NUMBER"
          else
            # Find the most recent open PR
            PR_NUMBER=$(gh pr list --state open --limit 1 --json number --jq '.[0].number // empty')
            if [[ -z "$PR_NUMBER" ]]; then
              echo "No open PRs found"
              exit 0
            fi
            echo "Using most recent open PR: $PR_NUMBER"
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Get comprehensive PR analysis
        id: pr_analysis
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ steps.pr_detection.outputs.pr_number }}
        run: |
          echo "Analyzing PR #$PR_NUMBER for ALM orchestration..."
          
          # Get PR details
          PR_DATA=$(gh pr view "$PR_NUMBER" --json title,author,headRefName,baseRefName,state,mergeable,additions,deletions,changedFiles,reviewRequests,latestReviews,commits,statusCheckRollup)
          
          # Extract basic info
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
          HEAD_BRANCH=$(echo "$PR_DATA" | jq -r '.headRefName')
          BASE_BRANCH=$(echo "$PR_DATA" | jq -r '.baseRefName')
          PR_STATE=$(echo "$PR_DATA" | jq -r '.state')
          MERGEABLE_STATE=$(echo "$PR_DATA" | jq -r '.mergeable')
          ADDITIONS=$(echo "$PR_DATA" | jq -r '.additions')
          DELETIONS=$(echo "$PR_DATA" | jq -r '.deletions')
          FILES_CHANGED=$(echo "$PR_DATA" | jq -r '.changedFiles')
          
          # Analyze reviews
          APPROVALS_COUNT=$(echo "$PR_DATA" | jq '[.latestReviews[] | select(.state == "APPROVED")] | length')
          REVIEW_REQUESTS_COUNT=$(echo "$PR_DATA" | jq '.reviewRequests | length')
          
          # Analyze checks
          CHECKS_STATUS=$(echo "$PR_DATA" | jq -r '.statusCheckRollup.state // "PENDING"')
          
          # Get commit messages
          COMMIT_MESSAGES=$(echo "$PR_DATA" | jq -r '.commits[].messageHeadline' | head -10 | paste -sd '\n')
          
          # Get changed files
          CHANGED_FILES=$(gh pr diff "$PR_NUMBER" --name-only | head -20 | paste -sd '\n')
          
          # Get issue references from commits and PR
          ISSUE_REFS=$(echo "$PR_DATA" | jq -r '.commits[].messageHeadline' | grep -oE '#[0-9]+' | sort -u | paste -sd ',' || echo "none")
          
          # Store outputs using multiline format
          cat << 'PR_ANALYSIS_EOF' >> $GITHUB_OUTPUT
          pr_title<<EOF
          $PR_TITLE
          EOF
          pr_author<<EOF
          $PR_AUTHOR
          EOF
          head_branch<<EOF
          $HEAD_BRANCH
          EOF
          base_branch<<EOF
          $BASE_BRANCH
          EOF
          pr_state<<EOF
          $PR_STATE
          EOF
          mergeable_state<<EOF
          $MERGEABLE_STATE
          EOF
          files_changed<<EOF
          $FILES_CHANGED
          EOF
          additions<<EOF
          $ADDITIONS
          EOF
          deletions<<EOF
          $DELETIONS
          EOF
          approvals_count<<EOF
          $APPROVALS_COUNT
          EOF
          review_requests_count<<EOF
          $REVIEW_REQUESTS_COUNT
          EOF
          checks_status<<EOF
          $CHECKS_STATUS
          EOF
          commit_messages<<EOF
          $COMMIT_MESSAGES
          EOF
          changed_files<<EOF
          $CHANGED_FILES
          EOF
          issue_refs<<EOF
          $ISSUE_REFS
          EOF
          PR_ANALYSIS_EOF

      - name: Generate ALM orchestration decision
        id: alm_decision
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "Generating ALM decision using Copilot CLI..."
          
          # Read the prompt template
          PROMPT_TEMPLATE=$(cat .github/prompts/alm-orchestrator.txt)
          
          # Replace placeholders with actual values
          PROMPT=$(echo "$PROMPT_TEMPLATE" | \
            sed "s/{{PR_NUMBER}}/${{ steps.pr_detection.outputs.pr_number }}/g" | \
            sed "s/{{PR_AUTHOR}}/${{ steps.pr_analysis.outputs.pr_author }}/g" | \
            sed "s/{{PR_TITLE}}/${{ steps.pr_analysis.outputs.pr_title }}/g" | \
            sed "s/{{HEAD_BRANCH}}/${{ steps.pr_analysis.outputs.head_branch }}/g" | \
            sed "s/{{BASE_BRANCH}}/${{ steps.pr_analysis.outputs.base_branch }}/g" | \
            sed "s/{{PR_STATE}}/${{ steps.pr_analysis.outputs.pr_state }}/g" | \
            sed "s/{{FILES_CHANGED}}/${{ steps.pr_analysis.outputs.files_changed }}/g" | \
            sed "s/{{ADDITIONS}}/${{ steps.pr_analysis.outputs.additions }}/g" | \
            sed "s/{{DELETIONS}}/${{ steps.pr_analysis.outputs.deletions }}/g" | \
            sed "s/{{APPROVALS_COUNT}}/${{ steps.pr_analysis.outputs.approvals_count }}/g" | \
            sed "s/{{REVIEW_REQUESTS_COUNT}}/${{ steps.pr_analysis.outputs.review_requests_count }}/g" | \
            sed "s/{{CHECKS_STATUS}}/${{ steps.pr_analysis.outputs.checks_status }}/g" | \
            sed "s/{{MERGEABLE_STATE}}/${{ steps.pr_analysis.outputs.mergeable_state }}/g")
          
          # Add commit messages and changed files
          PROMPT=$(echo "$PROMPT" | sed "s/{{COMMIT_MESSAGES}}/${{ steps.pr_analysis.outputs.commit_messages }}/g")
          PROMPT=$(echo "$PROMPT" | sed "s/{{CHANGED_FILES}}/${{ steps.pr_analysis.outputs.changed_files }}/g")
          
          # Save prompt to file for debugging
          echo "$PROMPT" > /tmp/alm_prompt.txt
          echo "Generated prompt (first 500 chars):"
          head -c 500 /tmp/alm_prompt.txt
          
          # Generate ALM decision using Copilot
          ALM_RESPONSE=$(gh copilot suggest --target shell "$(cat /tmp/alm_prompt.txt)" | head -100)
          
          echo "ALM Response:"
          echo "$ALM_RESPONSE"
          
          # Store response for next step
          cat << 'ALM_RESPONSE_EOF' >> $GITHUB_OUTPUT
          alm_response<<EOF
          $ALM_RESPONSE
          EOF
          ALM_RESPONSE_EOF

      - name: Execute ALM actions
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ steps.pr_detection.outputs.pr_number }}
        run: |
          echo "Executing ALM actions for PR #$PR_NUMBER..."
          
          # Parse the ALM response (simplified for now - would need more sophisticated JSON parsing)
          ALM_RESPONSE="${{ steps.alm_decision.outputs.alm_response }}"
          
          echo "=== ALM Orchestration Summary ==="
          echo "PR: #$PR_NUMBER"
          echo "Author: ${{ steps.pr_analysis.outputs.pr_author }}"
          echo "State: ${{ steps.pr_analysis.outputs.pr_state }}"
          echo "Approvals: ${{ steps.pr_analysis.outputs.approvals_count }}"
          echo "Checks: ${{ steps.pr_analysis.outputs.checks_status }}"
          echo "Mergeable: ${{ steps.pr_analysis.outputs.mergeable_state }}"
          echo "Issues Referenced: ${{ steps.pr_analysis.outputs.issue_refs }}"
          echo ""
          echo "ALM Analysis:"
          echo "$ALM_RESPONSE"
          echo ""
          
          # Example ALM actions (would be enhanced based on actual response parsing)
          if [[ "${{ steps.pr_analysis.outputs.approvals_count }}" == "0" && "${{ steps.pr_analysis.outputs.review_requests_count }}" == "0" ]]; then
            echo "ðŸ”„ ACTION: Requesting reviews for new PR..."
            # In a full implementation, this would analyze changed files and assign appropriate reviewers
            echo "Would request reviews from code owners and domain experts"
          elif [[ "${{ steps.pr_analysis.outputs.approvals_count }}" -gt "0" && "${{ steps.pr_analysis.outputs.checks_status }}" == "SUCCESS" ]]; then
            echo "âœ… ACTION: PR appears ready for merge consideration"
            echo "Would verify all merge requirements and possibly auto-merge if policies allow"
          fi

      - name: Update GitHub Projects and Issues
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          PR_NUMBER: ${{ steps.pr_detection.outputs.pr_number }}
        run: |
          echo "Updating GitHub Projects and Issues based on ALM analysis..."
          
          # Get organization projects (if any)
          echo "Checking for organization projects..."
          gh project list --owner dynamicstms365 || echo "No organization projects found or insufficient permissions"
          
          # Example project management actions
          echo "=== Project Management Actions ==="
          echo "â€¢ Would move associated issues to appropriate project columns"
          echo "â€¢ Would create issues for untracked work items found in commits"
          echo "â€¢ Would update issue labels and assignments based on PR state"
          echo "â€¢ Would add ALM status comments to related issues"
          
          # Post ALM summary as PR comment
          ALM_SUMMARY="## ðŸ¤– ALM Orchestration Summary
          
          **PR Analysis Complete** - $(date)
          
          **Current State:**
          - Approvals: ${{ steps.pr_analysis.outputs.approvals_count }}
          - Pending Reviews: ${{ steps.pr_analysis.outputs.review_requests_count }}
          - Checks Status: ${{ steps.pr_analysis.outputs.checks_status }}
          - Mergeable: ${{ steps.pr_analysis.outputs.mergeable_state }}
          - Issues Referenced: ${{ steps.pr_analysis.outputs.issue_refs }}
          
          **Files Changed:** ${{ steps.pr_analysis.outputs.files_changed }} files (+${{ steps.pr_analysis.outputs.additions }} -${{ steps.pr_analysis.outputs.deletions }})
          
          **Next Actions:**
          Based on the current state, the ALM orchestrator will determine and execute appropriate lifecycle actions.
          
          *This is an automated ALM analysis. Further actions may be taken based on the analysis results.*"
          
          gh pr comment "$PR_NUMBER" --body "$ALM_SUMMARY"
          echo "Posted ALM summary comment to PR #$PR_NUMBER"
