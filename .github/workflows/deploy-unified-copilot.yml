name: Deploy Unified Copilot Platform

on:
  push:
    branches: [main]
    paths:
      - 'src/CopilotAgent/**'
      - 'src/Shared/**'
      - '.github/workflows/deploy-unified-copilot.yml'
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deployment Mode'
        required: false
        default: 'unified'
        type: choice
        options:
          - unified
          - github-only
          - teams-only
      environment:
        description: 'Deployment Environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  AZURE_RESOURCE_GROUP: 'copilot-powerplatform-deploy-rg'
  CONTAINER_APP_NAME: 'copilot-powerplatform-app'
  CONTAINER_APP_ENV: 'github-copilot-bot-env'
  AZURE_LOCATION: 'eastus'
  DEPLOY_MODE: ${{ github.event.inputs.deploy_mode || 'unified' }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image_url: ${{ steps.build_push.outputs.image_url }}
      image_url_sha: ${{ steps.build_push.outputs.image_url_sha }}
      image_url_semver: ${{ steps.build_push.outputs.image_url_semver }}
      semantic_version: ${{ steps.semver.outputs.version }}
      commit_sha: ${{ steps.build_push.outputs.commit_sha }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for semantic versioning

      - name: Generate Semantic Version
        id: semver
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true
          search_commit_body: true
      
      - name: Validate Semantic Version
        run: |
          SEMANTIC_VERSION="${{ steps.semver.outputs.version }}"
          echo "üöÄ Generated unified platform version: $SEMANTIC_VERSION"
          
          if [[ ! "$SEMANTIC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid semantic version format: '$SEMANTIC_VERSION'"
            echo "Expected format: X.Y.Z (e.g., 1.1.3)"
            exit 1
          fi
          
          if [[ -z "$SEMANTIC_VERSION" ]]; then
            echo "‚ùå ERROR: Semantic version is empty"
            exit 1
          fi
          
          echo "‚úÖ Reynolds unified platform version validation passed: $SEMANTIC_VERSION"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build and Test Unified Platform
        run: |
          echo "üèóÔ∏è Building unified copilot platform with Maximum Effort‚Ñ¢..."
          dotnet restore src/CopilotAgent.sln
          dotnet build src/CopilotAgent.sln -c Release
          dotnet test src/CopilotAgent.Tests/CopilotAgent.Tests.csproj
          dotnet publish src/CopilotAgent/CopilotAgent.csproj -c Release -o ./publish
          echo "‚úÖ Unified platform built and tested successfully"

      - name: Build and Push Unified Container
        id: build_push
        env:
          REGISTRY: ghcr.io
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: copilot-powerplatform
          IMAGE_NAME: copilot-platform-unified
          SEMANTIC_VERSION: ${{ steps.semver.outputs.version }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          # Construct unified image name
          FULL_IMAGE_NAME=$(echo "$REPO_OWNER/$REPO_NAME/$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo "üèóÔ∏è Building unified copilot platform: $REGISTRY/$FULL_IMAGE_NAME"
          echo "üìã Version: $SEMANTIC_VERSION | Commit: ${COMMIT_SHA:0:7} | Mode: ${{ env.DEPLOY_MODE }}"
          
          # Validate components
          if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$IMAGE_NAME" ]]; then
            echo "‚ùå ERROR: Missing image name components"
            exit 1
          fi
          
          if [[ -z "$SEMANTIC_VERSION" || -z "$COMMIT_SHA" ]]; then
            echo "‚ùå ERROR: Missing versioning information"
            exit 1
          fi
          
          # Build single Docker image for all deployment scenarios
          echo "üê≥ Building unified platform container..."
          docker build -t $REGISTRY/$FULL_IMAGE_NAME:latest .
          
          # Create comprehensive tag strategy for unified deployment
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:${COMMIT_SHA:0:7}
          docker tag $REGISTRY/$FULL_IMAGE_NAME:latest $REGISTRY/$FULL_IMAGE_NAME:unified-latest
          
          echo "üè∑Ô∏è Created unified platform tags:"
          echo "  - latest (deployment ready)"
          echo "  - $SEMANTIC_VERSION (semantic version)"
          echo "  - $COMMIT_SHA (full SHA)"
          echo "  - ${COMMIT_SHA:0:7} (short SHA)"
          echo "  - unified-latest (Reynolds special)"
          
          # Login and push once to registry
          echo "üîê Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          
          # Push all tags efficiently
          echo "üì¶ Pushing unified platform with Maximum Effort‚Ñ¢..."
          docker push $REGISTRY/$FULL_IMAGE_NAME:latest
          docker push $REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION
          docker push $REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA
          docker push $REGISTRY/$FULL_IMAGE_NAME:${COMMIT_SHA:0:7}
          docker push $REGISTRY/$FULL_IMAGE_NAME:unified-latest
          
          # Set outputs for unified deployment
          FINAL_IMAGE_URL_LATEST="$REGISTRY/$FULL_IMAGE_NAME:latest"
          FINAL_IMAGE_URL_SHA="$REGISTRY/$FULL_IMAGE_NAME:$COMMIT_SHA"
          FINAL_IMAGE_URL_SEMVER="$REGISTRY/$FULL_IMAGE_NAME:$SEMANTIC_VERSION"
          
          echo "image_url=$FINAL_IMAGE_URL_LATEST" >> $GITHUB_OUTPUT
          echo "image_url_sha=$FINAL_IMAGE_URL_SHA" >> $GITHUB_OUTPUT
          echo "image_url_semver=$FINAL_IMAGE_URL_SEMVER" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Unified platform container ready for deployment:"
          echo "  üè∑Ô∏è  Latest: $FINAL_IMAGE_URL_LATEST"
          echo "  üè∑Ô∏è  SHA: $FINAL_IMAGE_URL_SHA"
          echo "  üè∑Ô∏è  SemVer: $FINAL_IMAGE_URL_SEMVER"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write
      packages: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }}

      - name: Install Azure Container Apps Extension
        run: |
          az extension add --name containerapp --upgrade

      - name: Wait for Container App Operations to Complete
        run: |
          echo "üîç Checking for ongoing Container App operations..."
          
          # Function to check operation status
          check_operations() {
            local operations=$(az containerapp operation list \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --query "[?properties.provisioningState=='InProgress']" \
              --output tsv 2>/dev/null || echo "")
            
            if [[ -n "$operations" ]]; then
              echo "‚è≥ Operations in progress detected"
              return 1
            else
              echo "‚úÖ No operations in progress"
              return 0
            fi
          }
          
          # Wait for operations to complete
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Attempt $attempt/$max_attempts - Checking operation status..."
            
            if check_operations; then
              echo "‚úÖ Ready for unified deployment"
              break
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "‚ö†Ô∏è Proceeding with deployment (Azure handles conflicts)"
              break
            fi
            
            echo "‚è±Ô∏è Waiting 30s before next check..."
            sleep 30
            attempt=$((attempt + 1))
          done

      - name: Deploy Unified Copilot Platform
        id: deploy
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build.outputs.image_url_sha }}
          containerAppEnvironment: ${{ env.CONTAINER_APP_ENV }}
          location: ${{ env.AZURE_LOCATION }}
          targetPort: 8080
          ingress: external
          environmentVariables: |
            NGL_DEVOPS_APP_ID=${{ vars.NGL_DEVOPS_APP_ID }}
            ASPNETCORE_ENVIRONMENT=Production
            ASPNETCORE_URLS=http://+:8080
            COPILOT_VERSION=${{ needs.build.outputs.semantic_version }}
            COPILOT_COMMIT_SHA=${{ needs.build.outputs.commit_sha }}
            DEPLOYMENT_MODE=${{ env.DEPLOY_MODE }}
            REYNOLDS_UNIFIED_PLATFORM=true

      - name: Configure Unified Platform Secrets and Resources
        run: |
          echo "üîß Configuring unified platform with supernatural precision..."
          
          # Validate required secrets exist
          echo "üîç Validating GitHub secrets..."
          
          PRIVATE_KEY_SECRET="${{ secrets.NGL_DEVOPS_BOT_PEM }}"
          WEBHOOK_SECRET="${{ secrets.NGL_DEVOPS_WEBHOOK_SECRET }}"
          
          if [[ -z "$PRIVATE_KEY_SECRET" ]]; then
            echo "‚ùå ERROR: GitHub secret 'NGL_DEVOPS_BOT_PEM' is not set"
            exit 1
          fi
          
          if [[ -z "$WEBHOOK_SECRET" ]]; then
            echo "‚ùå ERROR: GitHub secret 'NGL_DEVOPS_WEBHOOK_SECRET' is not set"
            exit 1
          fi
          
          echo "‚úÖ Required secrets validation passed"
          
          # Configure with retry logic
          configure_unified_platform() {
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üîÑ Unified configuration attempt $attempt/$max_attempts"
              
              echo "üîê Setting unified platform secrets..."
              if az containerapp secret set \
                --name ${{ env.CONTAINER_APP_NAME }} \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --secrets "ngl-devops-private-key=$PRIVATE_KEY_SECRET" \
                          "ngl-devops-webhook-secret=$WEBHOOK_SECRET"; then
                
                echo "üîß Updating unified platform configuration..."
                if az containerapp update \
                  --name ${{ env.CONTAINER_APP_NAME }} \
                  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                  --set-env-vars "NGL_DEVOPS_PRIVATE_KEY=secretref:ngl-devops-private-key" \
                                "NGL_DEVOPS_WEBHOOK_SECRET=secretref:ngl-devops-webhook-secret" \
                                "REYNOLDS_ORGANIZATIONAL_MODE=true" \
                                "REYNOLDS_ENTERPRISE_FEATURES=true" \
                                "REYNOLDS_GITHUB_INTEGRATION=true" \
                                "REYNOLDS_TEAMS_INTEGRATION=true" \
                                "REYNOLDS_MCP_TRANSPORT=streamable-http" \
                  --cpu 1.0 \
                  --memory 2.0Gi \
                  --min-replicas 1 \
                  --max-replicas 5; then
                  
                  echo "‚úÖ Unified platform configuration completed with Maximum Effort‚Ñ¢"
                  return 0
                fi
              fi
              
              echo "‚ö†Ô∏è Configuration attempt $attempt failed"
              if [ $attempt -lt $max_attempts ]; then
                echo "‚è±Ô∏è Retrying in 20 seconds..."
                sleep 20
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "‚ùå Configuration failed after $max_attempts attempts"
            return 1
          }
          
          # Execute unified configuration
          if ! configure_unified_platform; then
            echo "üö® Configuration failed - checking deployment status..."
            exit 1
          fi

      - name: Validate Unified Deployment
        id: validate_deploy
        run: |
          echo "üîç Validating unified platform deployment..."
          
          # Get container app FQDN
          FQDN=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "fqdn=$FQDN" >> $GITHUB_OUTPUT
          echo "semantic_version=${{ needs.build.outputs.semantic_version }}" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ needs.build.outputs.commit_sha }}" >> $GITHUB_OUTPUT
          
          # Wait for container to be ready
          echo "‚è≥ Waiting for unified platform to be ready..."
          sleep 60
          
          # Test unified endpoints
          echo "üß™ Testing unified platform endpoints..."
          
          # Test health endpoint
          for i in {1..10}; do
            if curl -f "https://$FQDN/api/github/health" 2>/dev/null; then
              echo "‚úÖ GitHub integration health check passed on attempt $i"
              break
            else
              echo "‚è≥ Health check failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Test MCP capabilities endpoint
          echo "üß™ Testing unified MCP capabilities..."
          curl -f "https://$FQDN/mcp/capabilities" || echo "‚ö†Ô∏è MCP capabilities endpoint not responding yet"

      - name: Summary
        run: |
          echo "üöÄ **Unified Copilot Platform Deployment Complete!**"
          echo ""
          echo "### üì¶ Version Information"
          echo "- **Semantic Version**: ${{ steps.validate_deploy.outputs.semantic_version }}"
          echo "- **Commit SHA**: ${{ steps.validate_deploy.outputs.commit_sha }}"
          echo "- **Container Image**: ${{ needs.build.outputs.image_url_sha }}"
          echo "- **Deployment Mode**: ${{ env.DEPLOY_MODE }}"
          echo ""
          echo "### üåê Unified Endpoints"
          echo "- **App URL**: https://${{ steps.validate_deploy.outputs.fqdn }}"
          echo "- **Health Check**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/health"
          echo "- **GitHub Webhook**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/github/webhook"
          echo "- **Teams Bot Endpoint**: https://${{ steps.validate_deploy.outputs.fqdn }}/api/messages"
          echo "- **MCP Capabilities**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp/capabilities"
          echo "- **MCP Endpoint**: https://${{ steps.validate_deploy.outputs.fqdn }}/mcp"
          echo ""
          echo "### üè∑Ô∏è Available Container Tags"
          echo "- **Latest**: ${{ needs.build.outputs.image_url }}"
          echo "- **SHA**: ${{ needs.build.outputs.image_url_sha }}"
          echo "- **SemVer**: ${{ needs.build.outputs.image_url_semver }}"
          echo ""
          echo "### ‚ö° Reynolds Features Enabled"
          echo "- ‚úÖ GitHub Webhook Integration"
          echo "- ‚úÖ Teams Bot Framework (when configured)"
          echo "- ‚úÖ MCP Streamable HTTP Transport"
          echo "- ‚úÖ Organizational Mode"
          echo "- ‚úÖ Enterprise Features"
          echo "- ‚úÖ Supernatural Event Orchestration"
          echo ""
          echo "### üéØ Next Steps"
          echo "1. **GitHub Integration**: Already configured and ready"
          echo "2. **Teams Integration**: Configure Bot Framework service with proper Entra ID permissions"
          echo "3. **MCP Client**: Update client config to use streamable-http transport"
          echo "4. **Organization**: Enable Reynolds across all dynamicstms365 repositories"
          echo ""
          echo "**Maximum Effort‚Ñ¢ deployment achieved. Just Reynolds.**"