name: Comprehensive Semantic Version Validation Test Suite
on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - valid-versions
          - invalid-versions
          - edge-cases
  push:
    paths:
      - '.github/workflows/deploy-azure-container.yml'
      - '.github/workflows/components/semver-validation-test.yml'
      - '.github/workflows/test-semver-validation-suite.yml'

jobs:
  # Valid Version Tests
  test-valid-basic-version:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'valid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3"
      expected_result: "pass"
      test_name: "Valid Basic Version"

  test-valid-single-digits:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'valid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "0.0.1"
      expected_result: "pass"
      test_name: "Valid Single Digits"

  test-valid-large-numbers:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'valid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "99.999.9999"
      expected_result: "pass"
      test_name: "Valid Large Numbers"

  test-valid-zeros:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'valid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "0.0.0"
      expected_result: "pass"
      test_name: "Valid All Zeros"

  test-valid-mixed-lengths:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'valid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "10.5.123"
      expected_result: "pass"
      test_name: "Valid Mixed Lengths"

  # Invalid Version Tests
  test-invalid-empty-version:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: ""
      expected_result: "fail"
      test_name: "Invalid Empty Version"

  test-invalid-two-parts:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2"
      expected_result: "fail"
      test_name: "Invalid Two Parts Only"

  test-invalid-four-parts:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3.4"
      expected_result: "fail"
      test_name: "Invalid Four Parts"

  test-invalid-with-letters:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3a"
      expected_result: "fail"
      test_name: "Invalid With Letters"

  test-invalid-with-prerelease:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3-alpha"
      expected_result: "fail"
      test_name: "Invalid With Prerelease"

  test-invalid-with-build-meta:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3+build.1"
      expected_result: "fail"
      test_name: "Invalid With Build Metadata"

  test-invalid-negative-numbers:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "-1.2.3"
      expected_result: "fail"
      test_name: "Invalid Negative Numbers"

  test-invalid-decimal-numbers:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'invalid-versions' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3.0"
      expected_result: "fail"
      test_name: "Invalid Decimal Format"

  # Edge Cases
  test-edge-whitespace:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'edge-cases' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: " 1.2.3 "
      expected_result: "fail"
      test_name: "Edge Case With Whitespace"

  test-edge-leading-zeros:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'edge-cases' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "01.02.03"
      expected_result: "fail"
      test_name: "Edge Case Leading Zeros"

  test-edge-v-prefix:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'edge-cases' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "v1.2.3"
      expected_result: "fail"
      test_name: "Edge Case V Prefix"

  test-edge-special-chars:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'edge-cases' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "1.2.3@"
      expected_result: "fail"
      test_name: "Edge Case Special Characters"

  test-edge-only-dots:
    if: ${{ !github.event.inputs.test_scope || github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'edge-cases' }}
    uses: ./.github/workflows/components/semver-validation-test.yml
    with:
      test_version: "..."
      expected_result: "fail"
      test_name: "Edge Case Only Dots"

  # Test Summary
  test-summary:
    needs: [
      test-valid-basic-version,
      test-valid-single-digits,
      test-valid-large-numbers,
      test-valid-zeros,
      test-valid-mixed-lengths,
      test-invalid-empty-version,
      test-invalid-two-parts,
      test-invalid-four-parts,
      test-invalid-with-letters,
      test-invalid-with-prerelease,
      test-invalid-with-build-meta,
      test-invalid-negative-numbers,
      test-invalid-decimal-numbers,
      test-edge-whitespace,
      test-edge-leading-zeros,
      test-edge-v-prefix,
      test-edge-special-chars,
      test-edge-only-dots
    ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Test Results Summary
        run: |
          echo "# üß™ Semantic Version Validation Test Results Summary"
          echo ""
          
          # Count test results
          TOTAL_TESTS=18
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          
          # Valid version tests
          echo "## ‚úÖ Valid Version Tests"
          
          if [[ "${{ needs.test-valid-basic-version.result }}" == "success" ]]; then
            echo "‚úÖ Valid Basic Version (1.2.3): PASSED"
            ((PASSED_TESTS++))
          elif [[ "${{ needs.test-valid-basic-version.result }}" == "failure" ]]; then
            echo "‚ùå Valid Basic Version (1.2.3): FAILED"
            ((FAILED_TESTS++))
          else
            echo "‚è≠Ô∏è Valid Basic Version (1.2.3): SKIPPED"
            ((SKIPPED_TESTS++))
          fi
          
          if [[ "${{ needs.test-valid-single-digits.result }}" == "success" ]]; then
            echo "‚úÖ Valid Single Digits (0.0.1): PASSED"
            ((PASSED_TESTS++))
          elif [[ "${{ needs.test-valid-single-digits.result }}" == "failure" ]]; then
            echo "‚ùå Valid Single Digits (0.0.1): FAILED"
            ((FAILED_TESTS++))
          else
            echo "‚è≠Ô∏è Valid Single Digits (0.0.1): SKIPPED"
            ((SKIPPED_TESTS++))
          fi
          
          if [[ "${{ needs.test-valid-large-numbers.result }}" == "success" ]]; then
            echo "‚úÖ Valid Large Numbers (99.999.9999): PASSED"
            ((PASSED_TESTS++))
          elif [[ "${{ needs.test-valid-large-numbers.result }}" == "failure" ]]; then
            echo "‚ùå Valid Large Numbers (99.999.9999): FAILED"
            ((FAILED_TESTS++))
          else
            echo "‚è≠Ô∏è Valid Large Numbers (99.999.9999): SKIPPED"
            ((SKIPPED_TESTS++))
          fi
          
          if [[ "${{ needs.test-valid-zeros.result }}" == "success" ]]; then
            echo "‚úÖ Valid All Zeros (0.0.0): PASSED"
            ((PASSED_TESTS++))
          elif [[ "${{ needs.test-valid-zeros.result }}" == "failure" ]]; then
            echo "‚ùå Valid All Zeros (0.0.0): FAILED"
            ((FAILED_TESTS++))
          else
            echo "‚è≠Ô∏è Valid All Zeros (0.0.0): SKIPPED"
            ((SKIPPED_TESTS++))
          fi
          
          if [[ "${{ needs.test-valid-mixed-lengths.result }}" == "success" ]]; then
            echo "‚úÖ Valid Mixed Lengths (10.5.123): PASSED"
            ((PASSED_TESTS++))
          elif [[ "${{ needs.test-valid-mixed-lengths.result }}" == "failure" ]]; then
            echo "‚ùå Valid Mixed Lengths (10.5.123): FAILED"
            ((FAILED_TESTS++))
          else
            echo "‚è≠Ô∏è Valid Mixed Lengths (10.5.123): SKIPPED"
            ((SKIPPED_TESTS++))
          fi
          
          # Invalid version tests
          echo ""
          echo "## ‚ùå Invalid Version Tests"
          
          # Continue with all other test result checks...
          
          echo ""
          echo "## üìä Final Test Summary"
          echo "Total Tests: $TOTAL_TESTS"
          echo "Passed: $PASSED_TESTS"
          echo "Failed: $FAILED_TESTS" 
          echo "Skipped: $SKIPPED_TESTS"
          
          if [[ $FAILED_TESTS -gt 0 ]]; then
            echo ""
            echo "‚ùå Some tests failed. Please review the test results above."
            exit 1
          else
            echo ""
            echo "‚úÖ All tests passed successfully!"
          fi