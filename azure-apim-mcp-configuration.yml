# Azure API Management Configuration for Reynolds MCP Integration
# Maximum Effortâ„¢ approach to enterprise API management with MCP preview features

apiVersion: 2023-05-01-preview
kind: ApiManagement
metadata:
  name: reynolds-communication-apim
  description: Enterprise API Management for Reynolds Communication & Orchestration API with MCP integration
  
spec:
  # APIM Instance Configuration
  service:
    name: "reynolds-apim-${ENVIRONMENT}"
    location: "East US"
    sku:
      name: "Developer" # Use Developer for testing, Standard/Premium for production
      capacity: 1
    publisherName: "Reynolds Organization"
    publisherEmail: "reynolds@nextgeneration.com"
    
  # API Definition from OpenAPI Specification
  apis:
    - name: reynolds-communication-api
      displayName: "Reynolds Communication & Orchestration API"
      description: "Comprehensive API for bidirectional communication and organizational orchestration"
      path: "reynolds"
      serviceUrl: "https://github-copilot-bot.salmonisland-520555ec.eastus.azurecontainerapps.io"
      protocols: 
        - https
      format: openapi
      specification: |
        # Import from /api-docs/v1/swagger.json endpoint
        # This will be dynamically loaded from the Container App
        
  # MCP Preview Configuration
  mcpIntegration:
    enabled: true
    version: "preview-2024"
    settings:
      # Transform REST API calls to MCP protocol
      transformations:
        - source: "POST /api/communication/send-message"
          mcpTool: "send_message"
          parameters:
            userIdentifier: "$.userIdentifier"
            message: "$.message" 
            preferredMethod: "$.preferredMethod"
            
        - source: "GET /api/communication/status/{userIdentifier}"
          mcpTool: "get_communication_status"
          parameters:
            userIdentifier: "$.path.userIdentifier"
            
        - source: "GET /api/communication/history/{userIdentifier}"
          mcpTool: "get_communication_history"
          parameters:
            userIdentifier: "$.path.userIdentifier"
            limit: "$.query.limit"
            since: "$.query.since"
            
        - source: "GET /api/communication/health"
          mcpTool: "check_communication_health"
          parameters: {}

  # Authentication & Security Configuration
  security:
    # Azure Active Directory Integration
    azureActiveDirectory:
      enabled: true
      clientId: "${AZURE_AD_CLIENT_ID}"
      authority: "https://login.microsoftonline.com/${AZURE_AD_TENANT_ID}"
      audiences:
        - "api://reynolds-communication"
        - "https://graph.microsoft.com"
        
    # API Key for Service-to-Service Communication
    apiKeys:
      - name: "reynolds-service-key"
        scope: "global"
        headerName: "X-API-Key"
        queryParamName: "api-key"
        
    # Rate Limiting & Throttling
    rateLimiting:
      callsPerPeriod: 1000
      renewalPeriod: 60
      
  # Policy Configuration
  policies:
    global:
      inbound: |
        <policies>
          <inbound>
            <!-- CORS Policy for Web Applications -->
            <cors allow-credentials="true">
              <allowed-origins>
                <origin>https://*.nextgeneration.com</origin>
                <origin>https://localhost:*</origin>
              </allowed-origins>
              <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>OPTIONS</method>
              </allowed-methods>
              <allowed-headers>
                <header>*</header>
              </allowed-headers>
            </cors>
            
            <!-- Authentication Validation -->
            <validate-jwt header-name="Authorization" failed-validation-httpcode="401">
              <openid-config url="https://login.microsoftonline.com/${AZURE_AD_TENANT_ID}/v2.0/.well-known/openid_configuration" />
              <audiences>
                <audience>api://reynolds-communication</audience>
              </audiences>
              <issuers>
                <issuer>https://login.microsoftonline.com/${AZURE_AD_TENANT_ID}/v2.0</issuer>
              </issuers>
            </validate-jwt>
            
            <!-- Rate Limiting -->
            <rate-limit-by-key calls="100" renewal-period="60" counter-key="@(context.Request.IpAddress)" />
            
            <!-- Request Logging for Telemetry -->
            <log-to-eventhub logger-id="reynolds-telemetry">
              @{
                return new JObject(
                  new JProperty("timestamp", DateTime.UtcNow),
                  new JProperty("requestId", context.RequestId),
                  new JProperty("method", context.Request.Method),
                  new JProperty("url", context.Request.Url.ToString()),
                  new JProperty("userAgent", context.Request.Headers.GetValueOrDefault("User-Agent")),
                  new JProperty("clientIP", context.Request.IpAddress)
                ).ToString();
              }
            </log-to-eventhub>
            
            <!-- MCP Headers -->
            <set-header name="X-MCP-Session-ID" exists-action="skip">
              <value>@(Guid.NewGuid().ToString())</value>
            </set-header>
            <set-header name="X-Request-ID" exists-action="skip">
              <value>@(context.RequestId)</value>
            </set-header>
          </inbound>
        </policies>
        
      outbound: |
        <policies>
          <outbound>
            <!-- Response Headers -->
            <set-header name="X-Response-Time">
              <value>@(context.Variables.GetValueOrDefault<long>("requestTime", 0))</value>
            </set-header>
            <set-header name="X-Rate-Limit-Remaining">
              <value>@(context.Variables.GetValueOrDefault<int>("rateLimitRemaining", 0))</value>
            </set-header>
            
            <!-- Response Caching for Status Endpoints -->
            <cache-store duration="30" />
          </outbound>
        </policies>
        
    # Operation-Specific Policies
    operations:
      send-message:
        inbound: |
          <!-- Enhanced validation for message sending -->
          <validate-parameters>
            <parameter name="userIdentifier" required="true" />
            <parameter name="message" required="true" />
          </validate-parameters>
          
          <!-- Message content validation -->
          <choose>
            <when condition="@(context.Request.Body.As<JObject>()["message"].ToString().Length > 4000)">
              <return-response>
                <set-status code="400" reason="Bad Request" />
                <set-body>{"error": "Message too long", "maxLength": 4000}</set-body>
              </return-response>
            </when>
          </choose>
          
      get-health:
        inbound: |
          <!-- Health check caching -->
          <cache-lookup vary-by-developer="false" vary-by-developer-groups="false" downstream-caching-type="none" />
          
        outbound: |
          <!-- Cache health responses for 1 minute -->
          <cache-store duration="60" />

  # Environment Variables
  environment:
    variables:
      AZURE_AD_TENANT_ID: "${AZURE_AD_TENANT_ID}"
      AZURE_AD_CLIENT_ID: "${AZURE_AD_CLIENT_ID}"
      BACKEND_SERVICE_URL: "https://github-copilot-bot.salmonisland-520555ec.eastus.azurecontainerapps.io"
      MCP_INTEGRATION_ENABLED: "true"
      REYNOLDS_PERSONA_ENABLED: "true"

  # Monitoring & Analytics
  monitoring:
    applicationInsights:
      enabled: true
      instrumentationKey: "${APPLICATION_INSIGHTS_INSTRUMENTATION_KEY}"
      
    eventHub:
      enabled: true
      name: "reynolds-telemetry"
      connectionString: "${EVENT_HUB_CONNECTION_STRING}"
      
    # Custom Metrics
    metrics:
      - name: "reynolds_messages_sent"
        description: "Number of messages sent through Reynolds API"
        type: "counter"
        
      - name: "reynolds_response_time"  
        description: "Average response time for Reynolds API calls"
        type: "gauge"
        
      - name: "reynolds_communication_success_rate"
        description: "Success rate of Reynolds communication attempts"  
        type: "percentage"

# Deployment Configuration
deployment:
  terraform:
    enabled: true
    backend:
      type: "azurerm"
      storageAccount: "${TF_STATE_STORAGE_ACCOUNT}"
      containerName: "tfstate"
      key: "reynolds-apim.tfstate"
      
  bicep:
    enabled: true
    templatePath: "./infrastructure/reynolds-apim.bicep"
    parametersPath: "./infrastructure/reynolds-apim.parameters.json"
    
  # Azure DevOps Pipeline Integration
  pipeline:
    trigger:
      branches:
        - main
        - develop
    stages:
      - stage: validate
        jobs:
          - job: validateApiSpec
            steps:
              - task: ValidateOpenAPISpec
              - task: SecurityScan
              - task: PolicyValidation
              
      - stage: deploy_dev
        dependsOn: validate
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
        jobs:
          - deployment: deployToDev
            environment: reynolds-dev
            
      - stage: deploy_prod
        dependsOn: validate
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        jobs:
          - deployment: deployToProd
            environment: reynolds-prod
            strategy:
              canary:
                increments: [25, 50, 100]

# Testing Configuration
testing:
  # API Test Suite
  endpoints:
    - name: "Health Check"
      method: GET
      path: "/api/communication/health"
      expectedStatus: 200
      
    - name: "Send Message"
      method: POST  
      path: "/api/communication/send-message"
      body:
        userIdentifier: "test@nextgeneration.com"
        message: "Test message from APIM MCP integration"
        preferredMethod: "Auto"
      expectedStatus: 200
      
    - name: "Communication Status"
      method: GET
      path: "/api/communication/status/test@nextgeneration.com"
      expectedStatus: 200
      
  # Load Testing
  loadTest:
    duration: "5m"
    virtualUsers: 50
    rampUp: "1m"
    scenarios:
      - name: "message_sending"
        weight: 70
        requests:
          - endpoint: "/api/communication/send-message"
            method: POST
            
      - name: "status_checking"
        weight: 30
        requests:
          - endpoint: "/api/communication/status/{user}"
            method: GET

# Documentation
documentation:
  swagger:
    enabled: true
    endpoint: "/api-docs"
    
  portalIntegration:
    enabled: true
    customization:
      logo: "https://example.com/reynolds-logo.png"
      primaryColor: "#1f4e79"
      backgroundColor: "#ffffff"
      
  examples:
    - name: "Basic Message Sending"
      description: "Send a simple message to a user"
      curl: |
        curl -X POST "https://reynolds-apim-prod.azure-api.net/reynolds/api/communication/send-message" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "userIdentifier": "christaylor@nextgeneration.com",
            "message": "Hello from Reynolds API via APIM!",
            "preferredMethod": "Auto"
          }'
          
    - name: "Command-Based Communication"
      description: "Send a command requiring response"
      curl: |
        curl -X POST "https://reynolds-apim-prod.azure-api.net/reynolds/api/communication/send-message" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "userIdentifier": "chris taylor",
            "message": "Please respond with: APIM MCP integration successful",
            "preferredMethod": "DirectMessage"
          }'